[{"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\index.js":"1","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\App.js":"2","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\reportWebVitals.js":"3","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapView.js":"4","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer.js":"5","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\StationsPopup.js":"6","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsStations_Swr.js":"7","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NWSStations.js":"8","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NwsStations.js":"9","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NwsStationsAsync.js":"10","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewerClass.js":"11","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsStations.js":"12","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsPoints_Swr.js":"13","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNOAABuoy_Swr.js":"14","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer_v2.js":"15","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer_v3.js":"16","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\StationDetailsPopup.js":"17","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MarineForecastPopup.js":"18","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MarineForecastSlider.js":"19"},{"size":559,"mtime":1617029814596,"results":"20","hashOfConfig":"21"},{"size":628,"mtime":1617291544443,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":6191,"mtime":1619037032906,"results":"24","hashOfConfig":"21"},{"size":38513,"mtime":1616786391072,"results":"25","hashOfConfig":"21"},{"size":1396,"mtime":1611156504707,"results":"26","hashOfConfig":"21"},{"size":2162,"mtime":1613249373616,"results":"27","hashOfConfig":"21"},{"size":667,"mtime":1611165763534,"results":"28","hashOfConfig":"21"},{"size":953,"mtime":1616609463567,"results":"29","hashOfConfig":"21"},{"size":969,"mtime":1616609396168,"results":"30","hashOfConfig":"21"},{"size":1927,"mtime":1611327445582,"results":"31","hashOfConfig":"21"},{"size":617,"mtime":1616694758141,"results":"32","hashOfConfig":"21"},{"size":1414,"mtime":1611351723033,"results":"33","hashOfConfig":"21"},{"size":758,"mtime":1612975265993,"results":"34","hashOfConfig":"21"},{"size":39902,"mtime":1617294966437,"results":"35","hashOfConfig":"21"},{"size":99897,"mtime":1621525183858,"results":"36","hashOfConfig":"21"},{"size":733,"mtime":1618933875801,"results":"37","hashOfConfig":"21"},{"size":2240,"mtime":1621449937082,"results":"38","hashOfConfig":"21"},{"size":6567,"mtime":1621538208258,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ehnz9x",{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\index.js",[],["91","92"],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\App.js",["93","94","95","96","97"],"\nimport './App.css';\n\nimport MapView from \"./components/MapView\";\nimport MapViewer from \"./components/MapViewer\";\nimport MapViewer_v2 from \"./components/MapViewer_v2\";\nimport MapViewer_v3 from \"./components/MapViewer_v3\";\nimport MapViewerClass from \"./components/MapViewerClass\";\n\n//console.log(\"MAPBOX_ACCESS_TOKEN: \" + process.env.REACT_APP_MAPBOX_ACCESS_TOKEN);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        { /* <MapView></MapView> */ }\n        { /* <MapViewer></MapViewer> */ }\n        { /* <MapViewerClass></MapViewerClass>*/ }\n        <MapViewer_v3></MapViewer_v3>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\reportWebVitals.js",[],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapView.js",["98","99","100","101","102","103","104","105","106","107","108","109"],"import ReactDOM from \"react-dom\";\r\nimport React, { useRef, useEffect } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nimport { useRequestNwsStations_Swr } from '../useRequestNwsStations_Swr'\r\nimport { useRequestNwsStations } from '../useRequestNwsStations'\r\nimport { useRequestNOAABuoy_Swr } from '../useRequestNOAABuoy_Swr';\r\nimport NwsStations from '../api/NwsStations'\r\nimport { NwsStationsAsync } from '../api/NwsStationsAsync'\r\n\r\nimport StationsPopup from \"./../components/StationsPopup\";\r\n\r\n//mapboxgl.accessToken = env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2NvbmZvcnRpIiwiYSI6ImNrajkyNnk3MjQ4YmEycnFqYm01cWVqamYifQ.P6dAko2hqzbdSnDOZq9IpA'\r\nconsole.log(\"MAPBOX_ACCESS_TOKEN: \" + process.env.REACT_APP_MAPBOX_ACCESS_TOKEN);\r\n\r\nconst _gridId = \"BOX\"\r\nconst _gridX = 59\r\nconst _gridY = 28\r\n\r\nconst _nws_Lat = 41.377894\r\nconst _nws_Lon = 71.635437\r\nconst _nws_Rad = 100\r\n\r\nconst _mBox_Lat = 41.377894\r\nconst _mBox_Lon = -71.635437\r\n\r\nconst MapView = () => {\r\n  const mapContainerRef = useRef(null);\r\n  const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }))\r\n\r\n  console.log(\"const ==> MapView\");\r\n\r\n  // Get all of the Required API Data here.\r\n  // NWS Stations\r\n  //const { data: resultsNWS, error: errorNWS } = useRequestNwsStations_Swr(_mBox_Lat, _mBox_Lon);\r\n  //console.log(\"useRequestNwsStations_Swr (MapView) ==> Results\");\r\n  //console.log(resultsNWS);\r\n\r\n  const { data: resultsNWS_Alt, error: errorNWS_Alt } = useRequestNwsStations(_gridId, _gridX, _gridY )\r\n  //console.log(\"useRequestNwsStations (MapView) ==> Results\");\r\n  //console.log(\"Errors ==>\" + errorNWS_Alt);\r\n  //console.log(resultsNWS_Alt);\r\n\r\n  // const { data: resultsNdbc, error: errorNdbc } = useRequestNOAABuoy_Swr(_mBox_Lat, _mBox_Lon);\r\n  // console.log(resultsNdbc);\r\n  // console.log(\"Errors ==> \" + errorNdbc);\r\n\r\n  // NOAA Weather Buoys (rss)\r\n\r\n  // Try Axios here!!!\r\n  //const resultsNWS_Axios = NwsStations(_gridId, _gridX, _gridY);\r\n  //console.log(\"NwsStations ==> Axios (MapView) ==> Results\");\r\n  //console.log(resultsNWS_Axios);\r\n\r\n  //const resultsNWS_Axios_Async = await NwsStationsAsync(_gridId, _gridX, _gridY);\r\n  //console.log(\"NwsStationsAsync ==> Axios (MapView) ==> Results\");\r\n  //console.log(resultsNWS_Axios_Async);\r\n\r\n  // initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      // See style options here: https://docs.mapbox.com/api/maps/#styles\r\n      style: 'mapbox://styles/mapbox/outdoors-v11',\r\n      center: [-71.635437, 41.377894],\r\n      zoom: 8,\r\n    });\r\n\r\n    // add navigation control (the +/- zoom buttons)\r\n    map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\r\n\r\n    map.on(\"load\", () => {\r\n      // add the data source for new a feature collection with no features0\r\n\r\n      //const resultsNWSAsync = await getNwsStationsDataAsync(_gridId, _gridX, _gridY);\r\n      //const { data: resultsNWS, error: errorNWS } = useRequestNwsStations_Swr(_gridId, _gridX, _gridY )\r\n      //const resultsNWSStations = NwsStations(_gridId, _gridX, _gridY);\r\n      //console.log(resultsNWSAsync);\r\n\r\n      console.log(\"map.on('load')\");\r\n\r\n      map.addSource(\"nws-station-data\", {\r\n        type: \"geojson\",\r\n        data: resultsNWS_Alt\r\n        //data: resultsNWS_Axios\r\n        //data: 'https://api.weather.gov/gridpoints/BOX/59,28/stations'\r\n        //data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\r\n        //data: {\r\n        //  type: \"FeatureCollection\",\r\n        //  features: []\r\n        //}\r\n      });\r\n\r\n      // now add the layer, and reference the data source above by name\r\n      map.addLayer({\r\n        id: \"nws-station-layer\",\r\n        source: \"nws-station-data\",\r\n        type: \"symbol\",\r\n        layout: {\r\n          // full list of icons here: https://labs.mapbox.com/maki-icons\r\n          \"icon-image\": \"castle-15\", // this icons on our map\r\n          \"icon-padding\": 0,\r\n          \"icon-allow-overlap\": true\r\n        }\r\n      });\r\n\r\n    });\r\n\r\n    map.on(\"move\", () => {\r\n      // get new center coordinates\r\n      const { lng, lat } = map.getCenter();\r\n\r\n      //var { data: resultsNWS, error: errorNWS } = useRequestNwsStations(_gridId, _gridX, _gridY )\r\n\r\n      // fetch new data\r\n      //const results = await fetchFakeData({ longitude: lng, latitude: lat });\r\n      //const results = await FetchNWSData({ longitude: lng, latitude: lat });\r\n      // update \"random-points-data\" source with new data\r\n      // all layers that consume the \"random-points-data\" data source will be updated automatically\r\n      //console.log(results);\r\n\r\n      //map.getSource(\"nws-station-data\").setData(resultsNWS);\r\n\r\n      //const url = \"https://api.weather.gov/gridpoints/BOX/59,28/stations\";\r\n      //const { data, error } = useSwr(url, { fetcher });\r\n      //const stations = data && !error ? data.slice(0, 2000) : [];\r\n  \r\n      //console.log(data);\r\n\r\n\r\n    });\r\n\r\n\r\n    // change cursor to pointer when user hovers over a clickable feature\r\n    map.on(\"mouseenter\", \"nws-station-layer\", e => {\r\n      if (e.features.length) {\r\n        map.getCanvas().style.cursor = \"pointer\";\r\n      }\r\n    });\r\n\r\n    // reset cursor to default when user is no longer hovering over a clickable feature\r\n    map.on(\"mouseleave\", \"nws-station-layer\", () => {\r\n      map.getCanvas().style.cursor = \"\";\r\n    });\r\n\r\n    // add popup when user clicks a point\r\n    map.on(\"click\", \"nws-station-layer\", e => {\r\n      if (e.features.length) {\r\n        console.log('features => ' + e.features.length);\r\n        const feature = e.features[0];\r\n        // create popup node\r\n        const popupNode = document.createElement(\"div\");\r\n        ReactDOM.render(<StationsPopup feature={feature} />, popupNode);\r\n        // set popup on map\r\n        popUpRef.current\r\n          .setLngLat(feature.geometry.coordinates)\r\n          .setDOMContent(popupNode)\r\n          .addTo(map);\r\n      }\r\n    });\r\n\r\n    // clean up on unmount\r\n    return () => map.remove();\r\n\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <div className=\"map-container\" ref={mapContainerRef} />;\r\n};\r\n\r\nexport default MapView;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport './../Map.css';\r\n\r\nimport axios from 'axios';\r\nimport xml2js from 'xml2js';\r\n\r\n//import { useRequestNwsStations_Swr } from '../useRequestNwsStations_Swr'\r\n//import { useRequestNwsPoints_Swr } from '../useRequestNwsPoints_Swr'\r\n//import { useRequestNwsStations } from '../useRequestNwsStations';\r\n//import NwsStations from '../api/NwsStations';\r\n//import NwsStationsAsync from '../api/NwsStationsAsync';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2NvbmZvcnRpIiwiYSI6ImNrajkyNnk3MjQ4YmEycnFqYm01cWVqamYifQ.P6dAko2hqzbdSnDOZq9IpA'\r\n\r\nconst _gridId = \"BOX\";\r\nconst _gridX = 59;\r\nconst _gridY = 28;\r\n\r\n//const urlNwsPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n//const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId}/${_gridX},${_gridY}/stations`;\r\n\r\nconst _mBox_Lat = 41.377894;\r\nconst _mBox_Lng = -71.635437;\r\n//const _mBox_Lat = 41.3779;\r\n//const _mBox_Lng = -71.6354;\r\nconst _mBox_Zoom = 8;\r\n\r\nconst ndbRadius = 100;\r\n\r\n//const MapViewer = () => {\r\n// State set functions only correctly working when Mapviewer is invoked as a Function.  \r\nfunction MapViewer () {\r\n  const mapContainerRef = useRef(null);\r\n\r\n  console.log(\"const ==> MapViewer\");\r\n\r\n  // Try Axios here!!!\r\n  //const resultsNWS_Axios = await NwsStationsAsync(_gridId, _gridX, _gridY);\r\n  //const resultsNWS_Axios = NwsStations(_gridId, _gridX, _gridY);\r\n  //console.log(\"NwsStations ==> Axios (MapView) ==> Results\");\r\n  //console.log(resultsNWS_Axios);\r\n\r\n  const [lng, setLng] = useState(_mBox_Lng);\r\n  const [lat, setLat] = useState(_mBox_Lat);\r\n  const [zoom, setZoom] = useState(_mBox_Zoom);\r\n\r\n  const [gridId, setGridId] = useState(\"None\");\r\n  const [gridX, setGridX] = useState(\"-1\");\r\n  const [gridY, setGridY] = useState(\"-1\");\r\n\r\n  const [nwsStations, setNwsStations] = useState([]);\r\n  const [ndbcStations, setNdbcStations] = useState([]);\r\n  const [stationWindData, setStationWindData] = useState([]);\r\n\r\n  //// NWS Points ==> Get the NWS Points from the Initial Mapbox Settings\r\n  //const { _gridId, _gridX, _gridY } = useRequestNwsPoints_Swr(_mBox_Lat, _mBox_Lng);\r\n  //console.log(\"useRequestNwsPoints_Swr (Results)\");\r\n  //console.log(\"_gridId: ==> \" + _gridId,);\r\n  //console.log(\"_gridX: ==> \" + _gridX,);\r\n  //console.log(\"_gridY: ==> \" + _gridY,);\r\n\r\n\r\n  //// NWS Stations ==> Return a geoJSON object with NWS Stations data\r\n  //// using the 'grid' parameters retrieved from the useRequestNwsPoints_Swr Hook\r\n  //const { data: resultsNWS_Alt, error: errorNWS_Alt } = useRequestNwsStations(_gridId, _gridX, _gridY)\r\n  //console.log(\"useRequestNwsStations (MapViewer) ==> Results\");\r\n\r\n  // https://www.mapbox.com/blog/mapping-u-s-wildfire-data-from-public-feeds\r\n  // https://dev.to/laney/react-mapbox-beginner-tutorial-2e35\r\n  // https://docs.mapbox.com/mapbox-gl-js/example/live-geojson/\r\n  // http://bl.ocks.org/ajzeigert/e71609306270eefd70eb\r\n\r\n  // Initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n\r\n    const getNwsPointsData = async (_mboxLat, _mboxLng) => {\r\n      const urlNwsPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n      console.log(urlNwsPoints);\r\n\r\n      // const response = await fetch(urlNwsPoints);\r\n      // //const response = await fetch(urlNwsPoints, {\r\n      // //  mode: 'no-cors', // no-cors, *cors, same-origin,\r\n      // //});\r\n      // //console.log(\"urlNwsPoints resp: ==> \" + response.ok);\r\n      // const data = await response.json();\r\n\r\n      const response = await axios(urlNwsPoints);\r\n      const data = response.data;\r\n\r\n      //console.log(\"getNwsPointsData (Results)\");\r\n      var _gridId_resp = data.properties.gridId;\r\n      var _gridX_resp = data.properties.gridX;\r\n      var _gridY_resp = data.properties.gridY;\r\n\r\n      //console.log(\"_gridId_resp: ==> \" + _gridId_resp);\r\n      //console.log(\"_gridX_resp: ==> \" + _gridX_resp);\r\n      ///console.log(\"_gridY_resp: ==> \" + _gridY_resp);\r\n\r\n      setGridId(_gridId_resp);\r\n      setGridX(_gridX_resp);\r\n      setGridY(_gridY_resp);\r\n    };\r\n\r\n    //async function getStationsData (_gridId, _gridX, _gridY) {\r\n    const getStationsData = async (_gridId, _gridX, _gridY) => {\r\n      const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId}/${_gridX},${_gridY}/stations`;\r\n      console.log(\"urlNwsStations:= \" + urlNwsStations);\r\n\r\n      // // ==> axios w/o Set State <==\r\n      // const response = await axios(urlNwsStations);\r\n      // return await response.data;\r\n\r\n      // ==> fetch <==\r\n      //const response = await fetch(urlNwsStations);\r\n      //const data = await response.json();\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNwsStations);\r\n      const data = await response.data;\r\n\r\n      console.log(\"==> NdbcStations Data Loaded <==\");\r\n\r\n      return data;\r\n\r\n      //setNwsStations(data);\r\n    };\r\n\r\n\r\n    // async getXMLResponse() {\r\n    //   const response = await fetch('https://gist.githubusercontent.com/Pavneet-Sing/3a69eb13677eba270264579bf0aa2121/raw/8a7cddd4c4dad77ba09f9e59e97b87cc04cf09fa/ParseXMLResponse.xml')\r\n    //   console.log('response is', await response.text());\r\n    // };\r\n\r\n\r\n    const getNdbcStationsData = async (_mboxLat, _mboxLng) => {\r\n      //const urlNdbcStations = `https://www.ndbc.noaa.gov/rss/ndbc_obs_search.php?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      const urlNdbcStations = `http://localhost:8080/?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      console.log(\"getNdbcStationsData URL ==> \" + urlNdbcStations);\r\n\r\n      /* Properties:\r\n        ==> id\r\n        ==> updated\r\n        ==> wind_direction\r\n        ==> wind_speed\r\n        ==> wind_gust\r\n        ==> air_temperature\r\n        ==> water_temperature\r\n        ==> longitude\r\n        ==> latitude\r\n      */\r\n\r\n      // Return object\r\n      const newFeaturesList = [];\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNdbcStations);\r\n      //return await response.data;\r\n      const data = await response.data;\r\n      //console.log(data);\r\n\r\n      // ==> axios <==\r\n      // const response = await axios(urlNdbcStations);\r\n      // const data = await response.data;\r\n      // setNwsStations(data);\r\n\r\n      // Parse baby... parse...\r\n\r\n      // // Promise Usage, seems slower than simple parseString below...\r\n      // var xml2js = require('xml2js');\r\n      // var parser = new xml2js.Parser(/* options */);\r\n      // parser.parseStringPromise(data).then(function (result) {\r\n      //   console.log('parseString Promise:')\r\n      //   console.dir(result);\r\n      // })\r\n      // .catch(function (err) {\r\n      //   // Failed\r\n      //   console.log('parser error');\r\n      // });\r\n      //const util = require('util');\r\n\r\n      // The result object below will be in JSON format\r\n      var parseString = require('xml2js').parseString;\r\n      parseString(data, function (err, result) {\r\n        //console.log(util.inspect(result, false, null));\r\n        //var resultFull = util.inspect(result, false, null);\r\n\r\n        // Create Feature Collection here:\r\n        // OK, result object above will be in JSON format\r\n        //console.log('stringify: ');\r\n        //console.log(JSON.stringify(result));\r\n        //var resultStringInit = JSON.stringify(result); \r\n        //console.log('resultStringInit: ');\r\n        //console.log(resultStringInit);\r\n\r\n        // Re-name the 'georss:point' node\r\n        var resultStringInit = JSON.stringify(result); \r\n        var resultString = resultStringInit.replaceAll('georss:point','geopoint');\r\n        const valuesArray = JSON.parse(resultString);\r\n\r\n        // Drill-down to the channel level\r\n        // There should be only ONE channel node\r\n        // Properties Spread Notation\r\n        var stationData = [...valuesArray.rss.channel];\r\n\r\n        // Iterate through the Station data\r\n        stationData[0].item.map((station) => {\r\n          //console.log('title: ' + station.title);\r\n          //console.log('geopoint: ' + station.geopoint);\r\n          //onsole.log('link: ' + station.link.toString().trim());\r\n\r\n           // Skip all 'SHIP' title entries\r\n           if (station.title.toString().toLowerCase() !== 'ship') {\r\n            //console.log('geopoint: ' + station.title);\r\n          \r\n            // ==> id\r\n            // From station.link\r\n            var checkLinkIndex = station.link.toString().trim().lastIndexOf(\"station=\");\r\n            let stationId = station.link.toString().trim().substring(checkLinkIndex + 8);\r\n            let statId = stationId;\r\n            \r\n            // ==> coords\r\n            var coords = station.geopoint.toString().split(\" \");\r\n            // ==> latitude\r\n            let latitude = coords[0];\r\n            // ==> longitude\r\n            let longitude = coords[1];\r\n\r\n            // console.log('stationId: ' + statId);\r\n            // console.log('latitude: ' + latitude);\r\n            // console.log('longitude: ' + longitude);\r\n\r\n            let updated = '';\r\n            let wind_direction = '';\r\n            let wind_speed = '';\r\n            let wind_gust = '';\r\n            let air_temperature = '';\r\n            let water_temperature = '';\r\n            let wind_degrees = '';\r\n            let water_degrees = '';\r\n\r\n            //OK, now that we have it, how the hell do I parse out the Description data!!!!\r\n            var parseDesc = station.description.toString().split('<br />');\r\n            for (let i=0; i < parseDesc.length; i++) {\r\n              //console.log(parseDesc[i]);\r\n\r\n              // Get her all warshed out!\r\n              var strippedDescItem = parseDesc[i].replaceAll('<strong>','').replaceAll('</strong>','').trim();\r\n              if (strippedDescItem.length > 0 ) {\r\n                //console.log(strippedDescItem)\r\n\r\n                // Remove thhe 'degrees' symbol\r\n                var strippedItem = strippedDescItem.replaceAll('&#176;', '');\r\n\r\n                if (strippedItem.indexOf('Wind Speed') > -1) {\r\n                  var chkItem_ws = strippedItem.toString().split(\":\");\r\n                  wind_speed = chkItem_ws[1];\r\n\r\n                  //console.log(\"Wind Speed ==> \" + wind_speed);\r\n                } else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                  var chkItem_wd = strippedItem.toString().split(\":\");\r\n                  wind_direction = chkItem_wd[1];\r\n\r\n                  //console.log(\"Wind Direction ==> \" + wind_direction);\r\n                } else if (strippedItem.indexOf('Wind Gust') > -1) {\r\n                  var chkItem_wg = strippedItem.toString().split(\":\");\r\n                  wind_gust = chkItem_wg[1];\r\n\r\n                  //console.log(\"Wind Gust ==> \" + wind_gust);\r\n                } else if (strippedItem.indexOf('Air Temperature') > -1) {\r\n                  var chkItem_at = strippedItem.toString().split(\":\");\r\n                  air_temperature = chkItem_at[1];\r\n\r\n                  //console.log(\"Air Temperature ==> \" + air_temperature);\r\n                } else if (strippedItem.indexOf('Water Temperature') > -1) {\r\n                  var chkItem_wt = strippedItem.toString().split(\":\");\r\n                  water_temperature = chkItem_wt[1];\r\n\r\n                  //console.log(\"Water Temperature ==> \" + water_temperature);\r\n                } \r\n                //   else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                //   var chkItem = strippedItem.toString().split(\":\");\r\n                //   wind_direction = chkItem[1];\r\n\r\n                //   console.log(\"Wind Direction ==> \" + wind_speed);\r\n                // }\r\n\r\n              }\r\n            }\r\n\r\n            // Create a 'newFeaturesList' object and pusgh it into the  \r\n            newFeaturesList.push({\r\n              type: 'Feature',\r\n              geometry: {\r\n                type: 'Point',\r\n                coordinates: [longitude, latitude],\r\n              },\r\n              properties: {\r\n                id: statId,\r\n                updated: updated,\r\n                wind_direction: wind_direction,\r\n                wind_speed: wind_speed,\r\n                wind_gust: wind_gust,\r\n                air_temperature: air_temperature,\r\n                water_temperature: water_temperature,\r\n              },\r\n            });\r\n          }\r\n\r\n        }); // Iterate through the Station data\r\n      });\r\n\r\n      // FeatureCollection featureCollection = FeatureCollection.fromFeature(Feature.fromGeometry(lineString))\r\n\r\n      // GeoJsonSource geoJsonSource = new GeoJsonSource(\"geojson-source\", featureCollection);\r\n      // style.addSource(geoJsonSource);\r\n\r\n      console.log(\"==> NdbcStations Data Loaded <==\");\r\n\r\n      return await Promise.resolve({\r\n        type: 'FeatureCollection',\r\n        features: newFeaturesList,\r\n      });\r\n\r\n    };\r\n\r\n    /****************************************************************************\r\n     * \r\n     *  This function will compile Feature Collection of wind related data from\r\n     *  NWS and NOAA Stations that will include:\r\n     * \r\n     *  ==> wind_direction\r\n     *  ==> wind_speed\r\n     *  ==> longitude\r\n     *  ==> latitude\r\n     * \r\n     *****************************************************************************/\r\n    const getStationWindData = async (_mboxLat, _mboxLng) => {\r\n\r\n      // Return object\r\n      const windDataFeaturesList = [];\r\n\r\n      /* OK, this call has hosed us before, but let's see what happens here anyway */\r\n      const urlNwsPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n      console.log(urlNwsPoints);\r\n\r\n      const resp_Points = await axios(urlNwsPoints);\r\n      const data_Points = await resp_Points.data;\r\n\r\n      // Get the GridID and X,Y coordinates for the NWS Stations API call below:\r\n      var _gridId_resp = data_Points.properties.gridId;\r\n      var _gridX_resp = data_Points.properties.gridX;\r\n      var _gridY_resp = data_Points.properties.gridY;\r\n\r\n      //console.log(\"getStationWindData == > _gridId_resp: ==> \" + _gridId_resp);\r\n      //console.log(\"getStationWindData == >_gridX_resp: ==> \" + _gridX_resp);\r\n      //console.log(\"getStationWindData == >_gridY_resp: ==> \" + _gridY_resp);\r\n\r\n      /****************/\r\n      /* NWS Stations */\r\n      /****************/\r\n      const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId_resp}/${_gridX_resp},${_gridY_resp}/stations`;\r\n      //console.log(\"urlNwsStations:= \" + urlNwsStations);\r\n\r\n      // ==> axios w/o Set State <==\r\n      const resp_NwsStations = await axios(urlNwsStations);\r\n      const nwsStations = await resp_NwsStations.data; //.json();\r\n      //console.log(\"nwsStations:= \" + nwsStations);\r\n\r\n      // ==> fetch <==\r\n      //const response = await fetch(urlNwsStations);\r\n      //const data = await response.json();\r\n \r\n      // Parse, baby parse....\r\n      // So we should now have a result set of NWS stations\r\n      // Iterate through these and grab the 'id' property which \r\n      // will containthe following link:  \r\n      //        https://api.weather.gov/stations/KBID\r\n      //\r\n      // To obtain Station Data, append the link with the following:\r\n      //        /observations/latest\r\n      //\r\n      // Send a request to this API url and then parse out the wind data\r\n\r\n      //var statsKeys =  Object.keys(nwsStations);\r\n      //console.log(\"Found (Object.keys): \"  + statsKeys);\r\n      //statsKeys.map((key) => {\r\n      //  console.log(key, statsKeys[key]);\r\n      //});\r\n\r\n      // OK, find the 'observationStations' array data\r\n      // This notation is better that the hard-coded index option.\r\n      console.log(\"Parse NWS Stations ==> \");\r\n      Object.keys(nwsStations).map(async (key) => {\r\n        //console.log(key, nwsStations[key]);\r\n\r\n        var station_id = null;\r\n        var stat_lon_coord = null;\r\n        var stat_lat_coord = null;\r\n        var stat_windDirection = null;\r\n        var stat_windSpeed = null;\r\n        var stat_Identifier = null;\r\n        var stat_Name = null;\r\n\r\n        // if (key === \"observationStations\"){\r\n        //   console.log(\"Observation Stations: ==> \");\r\n        //   nwsStations[key].map(async (stationUrl) => {\r\n        if (key === \"features\"){\r\n          //console.log(\"features: ==> \");\r\n          nwsStations[key].map(async (stat_Features) => {\r\n            //console.log(\"stat_Features ==>\");\r\n            //console.log(stat_Features);\r\n\r\n            var stationUrl = stat_Features.id.toString();\r\n            //console.log(\"stationUrl: \" + stationUrl);\r\n\r\n            // station_id = stat_Features.properties.stationIdentifier;\r\n            // stat_Identifier = stat_Features.properties.stationIdentifier;\r\n            // stat_Name = stat_Features.properties.name;\r\n\r\n            //console.log(\"station_id: \" + station_id);\r\n            //console.log(\"stat_Name: \" + stat_Name);\r\n\r\n            // // ==> id\r\n            // // From stationUrl\r\n            // var checkLinkIndex = stat_Features.id.toString().trim().lastIndexOf(\"/\");\r\n            // let stationId = stat_Features.id.toString().trim().substring(checkLinkIndex + 1);\r\n            // station_id = stationId;\r\n            // Object.keys(stat_Features).map(async (key2) => {\r\n            //   if (key2 === \"properties\") {\r\n            //     station_id = stat_Features[key2].stationIdentifier;\r\n            //     stat_Identifier = stat_Features[key2].stationIdentifier;\r\n            //     stat_Name = stat_Features[key2].name;\r\n            //   }\r\n            // });\r\n\r\n            // Create the URL to grab the individual Station Data  \r\n            var stationDataUrl = `${stationUrl}/observations/latest`;\r\n            // ==> axios w/o Set State <==\r\n            const stationResponse = await axios(stationDataUrl);\r\n            //return await response.data;\r\n            const stationData = await stationResponse.data;\r\n            //console.log(\"Station Data: \" + stationData);\r\n\r\n            Object.keys(stationData).map(async (key1) => {\r\n              //console.log(key1, stationData[key1]);\r\n\r\n              // We need the geometry key to access the co-ordinates\r\n              //console.log(\"stationData: \" + key1);\r\n              if (key1 === \"geometry\") {\r\n\r\n                stat_lon_coord = stationData[key1].coordinates[0];\r\n                stat_lat_coord = stationData[key1].coordinates[1];\r\n\r\n              };\r\n\r\n              // We need the properties key to access \r\n              // ==> windDirection\r\n              // ==> windSpeed\r\n              // ==> windGust\r\n              if (key1 === \"properties\") {\r\n\r\n                stat_windSpeed = stationData[key1].windSpeed.value;\r\n\r\n                var conv_windDirection = stationData[key1].windDirection.value;\r\n                //console.log(\"conv_windDirection ==> \" + conv_windDirection);\r\n\r\n                var convert_deg = parseInt(conv_windDirection) + 180;\r\n                if (convert_deg >= 360)\r\n                  convert_deg = convert_deg - 360;\r\n\r\n                stat_windDirection = convert_deg;\r\n                //console.log(\"stat_windDirection ==> \" + stat_windDirection);\r\n              }\r\n\r\n            }); // stationData\r\n\r\n            station_id = stat_Features.properties.stationIdentifier;\r\n            stat_Identifier = stat_Features.properties.stationIdentifier;\r\n            stat_Name = stat_Features.properties.name;\r\n\r\n            // Add NWS Station data. if it qualifies.\r\n            //\r\n            // Check for BOTH wind_direction AND sta_windSpeed\r\n            // values, otherwise skip on down...\r\n            if (!(stat_windDirection == null && stat_windSpeed == null))\r\n            {\r\n              //console.log(\"station_id: \" + station_id);\r\n              //console.log(\"stat_Name: \" + stat_Name);\r\n              //console.log(\"stat_windDirection: \" + stat_windDirection);\r\n              //console.log(\"stat_windSpeed: \" + stat_windSpeed);\r\n\r\n              //if (stat_windDirection > 0 && stat_windSpeed > 0) {\r\n\r\n                // Convert km/h to knots !!!\r\n                // divisor speed (km/h) / 1.852\r\n                var stat_wind_knots = stat_windSpeed / 1.852;\r\n\r\n                // Convert kmh to mph !!!\r\n                // divisor speed (km/h) / 1.852\r\n                var stat_wind_mph = stat_windSpeed / 1.852;\r\n\r\n                // console.log(\"station_id: \" + station_id);\r\n                // console.log(\"stat_Name: \" + stat_Name);\r\n                // console.log(\"stat_windDirection: \" + stat_windDirection);\r\n                // console.log(\"stat_windSpeed: \" + stat_windSpeed);\r\n                // console.log(\"stat_wind_knots: \" + stat_wind_knots);\r\n                // console.log(\"stat_wind_knots (Round): \" + stat_wind_knots.toFixed(0));\r\n\r\n                // Create a 'windDataFeaturesList' object and push it into the return object\r\n                //console.log(\"Push ==> NWS Station: \" + station_id);\r\n                windDataFeaturesList.push({\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [stat_lon_coord, stat_lat_coord],\r\n                  },\r\n                  properties: {\r\n                    id: station_id,\r\n                    name: stat_Name,\r\n                    type: \"NWS\",\r\n                    wind_direction: stat_windDirection,\r\n                    wind_speed: stat_wind_knots.toFixed(0),\r\n                  },\r\n                });\r\n\r\n              //}\r\n\r\n              //console.log(\" ==> Nws Stations <==\");\r\n            }\r\n            \r\n          }); //Nws Stations\r\n        }\r\n      });\r\n\r\n\r\n      /************************/\r\n      /* NOAA (NDBC) Stations */\r\n      /************************/\r\n      console.log(\"NOAA (NDBC) Stations ==> \");\r\n      const urlNdbcStations = `http://localhost:8080/?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      //console.log(\"getNdbcStationsData URL ==> \" + urlNdbcStations);\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNdbcStations);\r\n      //return await response.data;\r\n      const data = await response.data;\r\n      //console.log(data);\r\n\r\n      // ==> axios <==\r\n      // const response = await axios(urlNdbcStations);\r\n      // const data = await response.data;\r\n      // setNwsStations(data);\r\n\r\n      // Parse baby... parse...\r\n\r\n      // // Promise Usage, seems slower than simple parseString below...\r\n      // var xml2js = require('xml2js');\r\n      // var parser = new xml2js.Parser(/* options */);\r\n      // parser.parseStringPromise(data).then(function (result) {\r\n      //   console.log('parseString Promise:')\r\n      //   console.dir(result);\r\n      // })\r\n      // .catch(function (err) {\r\n      //   // Failed\r\n      //   console.log('parser error');\r\n      // });\r\n      //const util = require('util');\r\n\r\n      // The result object below will be in JSON format\r\n      var parseString = require('xml2js').parseString;\r\n      parseString(data, function (err, result) {\r\n        //console.log(util.inspect(result, false, null));\r\n        //var resultFull = util.inspect(result, false, null);\r\n\r\n        // Create Feature Collection here:\r\n        // OK, result object above will be in JSON format\r\n\r\n        // Re-name the 'georss:point' node\r\n        var resultStringInit = JSON.stringify(result); \r\n        var resultString = resultStringInit.replaceAll('georss:point','geopoint');\r\n        const valuesArray = JSON.parse(resultString);\r\n\r\n        // Drill-down to the channel level\r\n        // There should be only ONE channel node\r\n        // Properties Spread Notation\r\n        var stationData = [...valuesArray.rss.channel];\r\n\r\n        // Iterate through the Station data\r\n        stationData[0].item.map(async (station) => {\r\n          //console.log('title: ' + station.title);\r\n          //console.log('geopoint: ' + station.geopoint);\r\n          //onsole.log('link: ' + station.link.toString().trim());\r\n\r\n           // Skip all 'SHIP' title entries\r\n           if (station.title.toString().toLowerCase() !== 'ship') {\r\n            //console.log('geopoint: ' + station.title);\r\n          \r\n            // ==> id\r\n            // From station.link\r\n            var checkLinkIndex = station.link.toString().trim().lastIndexOf(\"station=\");\r\n            var stationId = station.link.toString().trim().substring(checkLinkIndex + 8);\r\n            var statId = stationId.toUpperCase();\r\n            var stat_title = station.title.toString();\r\n\r\n            // Attempt to grab the NOAA (NDBC) Id to remove\r\n            // it from the Station title (Name)\r\n            //var regExp_title = /\\-([^-]+)\\-/\r\n            var regExp_title = /-([0-9\\s]+)-/;\r\n            var title_match = regExp_title.exec(stat_title);\r\n          \r\n            if (title_match != null) {\r\n              let t_Match = title_match[0];\r\n              stat_title = stat_title.replace(t_Match, '-');\r\n            }\r\n \r\n            // ==> coords\r\n            var coords = station.geopoint.toString().split(\" \");\r\n            // ==> latitude\r\n            var sta_latitude = coords[0];\r\n            var latitude = parseFloat(sta_latitude.toString(), 2);\r\n            // ==> longitude\r\n            var sta_longitude = coords[1];\r\n            var longitude = parseFloat(sta_longitude.toString(), 2);\r\n            \r\n\r\n            let wind_direction = null; //'';\r\n            let wind_speed =  null; //'';\r\n\r\n            //OK, now that we have it, how the hell do I parse out the Description data!!!!\r\n            var parseDesc = station.description.toString().split('<br />');\r\n            for (let i=0; i < parseDesc.length; i++) {\r\n              //console.log(parseDesc[i]);\r\n\r\n              // Get her all warshed out!\r\n              var strippedDescItem = parseDesc[i].replaceAll('<strong>','').replaceAll('</strong>','').trim();\r\n              if (strippedDescItem.length > 0 ) {\r\n                //console.log(strippedDescItem)\r\n\r\n                // Remove the 'degrees' symbol\r\n                var strippedItem = strippedDescItem.replaceAll('&#176;', '');\r\n\r\n                if (strippedItem.indexOf('Wind Speed') > -1) {\r\n                  var chkItem_wp = strippedItem.toString().split(\":\");\r\n                  wind_speed = chkItem_wp[1];\r\n                } else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                  var chkItem_wd = strippedItem.toString().split(\":\");\r\n                  wind_direction = chkItem_wd[1];\r\n                } \r\n              }\r\n            }\r\n\r\n            //console.log(\"Wind Speed ==> \" + wind_speed);\r\n            //console.log(\"Wind Direction ==> \" + wind_direction);\r\n            if (!(wind_direction == null && wind_speed == null))\r\n            {\r\n              // Knots\r\n              var speed_knots = wind_speed.replaceAll('knots','').trim();\r\n              \r\n              // Degrees - Wind direction\r\n              // Pull out the drgrees from the \r\n              //var regExp = new RegExp(\"/\\(([^)]+)\\)/\");\r\n              var regExp = /\\(([^)]+)\\)/;\r\n              var wind_matches = regExp.exec(wind_direction);\r\n              var dir_degrees = wind_direction;\r\n\r\n              var dir_Text = wind_direction;\r\n\r\n              if (wind_matches != null) {\r\n                let w_Match = wind_matches[1];\r\n                //console.log(\"w_Match ==> \" + w_Match);\r\n\r\n                // Wind direction must me an int\r\n                // There should alway be a value here at this point\r\n                //dir_degrees = parseInt(w_Match);\r\n\r\n                // Rememeber, wind direction is where \r\n                // three wind in coming from!!\r\n                var convert_deg_NOAA = parseInt(w_Match) + 180;\r\n                if (convert_deg_NOAA >= 360)\r\n                   convert_deg_NOAA = convert_deg_NOAA - 360;\r\n\r\n                dir_degrees = convert_deg_NOAA;\r\n              }\r\n\r\n              //var dir_degrees = matches[1];\r\n              //var dir_degrees = wind_direction;\r\n\r\n              // // Add NOAA Station data. if it qualifies.\r\n              // console.log(\"Push ==> NOAA Station: \" + stat_title);\r\n              // console.log(\"statId ==> \" + statId);\r\n              // console.log(\"stat_title ==> \" + stat_title);\r\n              // console.log(\"speed_knots ==> \" + speed_knots);\r\n              // console.log(\"dir_degrees ==> \" + dir_degrees);\r\n\r\n              // Create a 'windDataFeaturesList' object and push it into the return object\r\n              windDataFeaturesList.push({\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [longitude, latitude],\r\n                },\r\n                properties: {\r\n                  id: statId,\r\n                  name: stat_title,\r\n                  type: \"NOAA\",\r\n                  wind_direction: dir_degrees,\r\n                  wind_speed: speed_knots,\r\n                },\r\n              });\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }); // Iterate through the Station data\r\n      });\r\n\r\n     \r\n\r\n      // return Promise.resolve({\r\n      //   type: 'FeatureCollection',\r\n      //   features: windDataFeaturesList,\r\n      // });\r\n\r\n      var FeatureCollection = {\r\n        type: \"FeatureCollection\",\r\n        features: windDataFeaturesList\r\n      }\r\n\r\n      console.log(FeatureCollection);\r\n      console.log(\" ==> Wind Data Loaded <==\");\r\n\r\n      // var sourceWindData = new mapboxgl.GeoJSONSource({\r\n      //   data: FeatureCollection\r\n      // })\r\n      // console.log(sourceWindData);\r\n\r\n      return Promise.resolve(FeatureCollection);\r\n\r\n    };\r\n\r\n    //getNwsPointsData(_mBox_Lat, _mBox_Lng);\r\n\r\n     //console.log(\"getStationsData (Set State Results)\");\r\n     //console.log(\"gridId: ==> \" + gridId);\r\n     //console.log(\"gridX: ==> \" + gridX);\r\n     //console.log(\"gridY: ==> \" + gridY);\r\n\r\n    /* ==> getStationsData  \r\n    // Call asyc getStationsData\r\n    // Set State below or check for error\r\n    getStationsData(_gridId, _gridX, _gridY) //;\r\n    .then(async nwsData => {\r\n      if (nwsData.type === \"FeatureCollection\")\r\n      {\r\n        setNwsStations(nwsData);\r\n        //setNwsStations(JSON.stringify(nwsData));\r\n        console.log(nwsStations);\r\n        console.log(\"getStationsData (Set State Results) ==> \" + nwsData.type);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(JSON.stringify(error));\r\n    });\r\n   */\r\n\r\n    /* ==> getNdbcStationsData  \r\n    // Call asyc getNdbcStationsData\r\n    // Set State below or check for error\r\n    getNdbcStationsData(_mBox_Lat, _mBox_Lng)\r\n    .then(ndbcData => {\r\n      setNdbcStations(ndbcData);\r\n      //console.log(ndbcStations);\r\n      //console.log(\"getNdbcStationsData (Set State Results)\");\r\n    })\r\n    .catch(error => {\r\n      console.log(JSON.stringify(error));\r\n    });\r\n    */\r\n\r\n    // Call asyc getStationWindData\r\n    // Set State below or check for error\r\n    getStationWindData(_mBox_Lat, _mBox_Lng)\r\n    .then(windData => {\r\n      setStationWindData(windData);\r\n      console.log(\"getStationWindData (Set State Results)\");\r\n      console.log(stationWindData);\r\n    })\r\n    .catch(error => {\r\n      console.log(\"ERROR ==> getStationWindData: \" + JSON.stringify(error));\r\n    });\r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    map.addControl(new mapboxgl.NavigationControl(), 'top-right');\r\n\r\n    map.on(\"load\", function () {\r\n      // add the data source for new a feature collection with no features\r\n      console.log(\"map.on('load')\");\r\n      //console.log(nwsStations);\r\n\r\n      /* NWS Station Data \r\n      map.addSource(\"nws-station-data\", {\r\n        type: \"geojson\",\r\n        data: nwsStations\r\n        //data: resultsNWS_Alt\r\n        //data: resultsNWS_Axios\r\n        //data: 'https://api.weather.gov/gridpoints/BOX/59,28/stations'\r\n      });\r\n\r\n            // now add the layer, and reference the data source above by name\r\n            map.addLayer({\r\n              id: \"nws-station-layer\",\r\n              source: \"nws-station-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"castle-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true\r\n              }\r\n            });\r\n      */\r\n      \r\n\r\n      /* NOAA Station Data \r\n      map.addSource(\"ndbc-station-data\", {\r\n        type: \"geojson\",\r\n        data:  ndbcStations\r\n      });\r\n\r\n            // now add the layer, and reference the data source above by name\r\n            map.addLayer({\r\n              id: \"ndbc-station-layer\",\r\n              source: \"ndbc-station-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                 // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"cemetery-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true\r\n              }\r\n            });\r\n      */\r\n\r\n\r\n       /* Station Wind Data */\r\n      //console.log(stationWindData);\r\n       map.addSource(\"station-wind-data\", {\r\n          type: \"geojson\",\r\n          data: stationWindData\r\n       }); //.then();\r\n\r\n            // now add the layer, and reference the data source above by name\r\n            map.addLayer({\r\n              id: \"station-wind-layer\",\r\n              source: \"station-wind-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"airport-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true,\r\n                \"icon-rotation-alignment\": \"map\",\r\n                \"icon-rotate\":{\r\n                  \"property\":\"wind_direction\",\r\n                  \"stops\": [\r\n                    [30, 30],\r\n                    [60, 60],\r\n                    [90, 90],\r\n                    [120, 120],\r\n                    [150, 150],\r\n                    [180, 180],\r\n                    [210, 210],\r\n                    [240, 240],\r\n                    [270, 270],\r\n                    [300, 300],\r\n                    [330, 330],\r\n                    [360, 360]\r\n                  ],\r\n                }\r\n              }\r\n            });\r\n\r\n            // change cursor to pointer when user hovers over a clickable feature\r\n            map.on(\"mouseenter\", \"station-wind-layer\", e => {\r\n              if (e.features.length) {\r\n                map.getCanvas().style.cursor = \"pointer\";\r\n              }\r\n            });\r\n\r\n            // reset cursor to default when user is no longer hovering over a clickable feature\r\n            map.on(\"mouseleave\", \"station-wind-layer\", () => {\r\n              map.getCanvas().style.cursor = \"\";\r\n            });\r\n      \r\n          \r\n        \r\n    });\r\n\r\n    // map.on('move', () => {\r\n\r\n    //  if (map.getLayer(\"station-wind-layer\") != null)\r\n    // //     map.removeLayer(\"station-wind-layer\");\r\n\r\n\r\n    // });\r\n\r\n\r\n\r\n    // map.on('move', () => {\r\n    //  setLng(map.getCenter().lng.toFixed(4));\r\n    //  setLat(map.getCenter().lat.toFixed(4));\r\n    //  setZoom(map.getZoom().toFixed(2));\r\n\r\n    //  console.log(\"map lat ==> \" + map.getCenter().lat.toFixed(4) + \"   Map lng==> \" + map.getCenter().lng.toFixed(4) );\r\n    //  console.log(\"lat ==> \" + lat + \"   lng==> \" + lng );\r\n    //  console.log(\"_mBox_Lat ==> \" + _mBox_Lat + \"   _mBox_Lng==> \" + _mBox_Lng );\r\n\r\n    //  var windDataSet =\r\n    //  getStationWindData(map.getCenter().lat, map.getCenter().lng)\r\n    //  .then(async windData => {\r\n    //    setStationWindData(windData);\r\n    //    //console.log(windData);\r\n    //    console.log(\"map.on('move' == > getStationWindData (Set State Results)\");\r\n    //  })\r\n    //  .catch(error => {\r\n    //    console.log(\"ERROR ==> getStationWindData: \" + JSON.stringify(error));\r\n    //  });\r\n\r\n    //  // Remove Wind Data\r\n    //  if (map.getLayer(\"station-wind-layer\") != null)\r\n    //     map.removeLayer(\"station-wind-layer\");\r\n\r\n    //  if (map.getSource(\"station-wind-data\") != null)     \r\n    //      map.removeSource(\"station-wind-data\");\r\n\r\n\r\n    //  console.log(stationWindData);\r\n\r\n    //  map.addSource(\"station-wind-data\", {\r\n    //   type: \"geojson\",\r\n    //   data: stationWindData,\r\n    //   //data: stationWindData\r\n    //       // data: await getStationWindData(_mBox_Lat, _mBox_Lng)\r\n    //       //         .then(windData => {\r\n    //       //           //setStationWindData(windData);\r\n    //       //           //console.log(stationWindData);\r\n    //       //           console.log(\"getStationWindData (Set State Results)\");\r\n    //       //         })\r\n    //       //         .catch(error => {\r\n    //       //           console.log(\"ERROR ==> getStationWindData: \" + JSON.stringify(error));\r\n    //       //         }),\r\n    //   });\r\n\r\n    //     // now add the layer, and reference the data source above by name\r\n        \r\n    //     map.addLayer({\r\n    //       id: \"station-wind-layer\",\r\n    //       source: \"station-wind-data\",\r\n    //       type: \"symbol\",\r\n    //       layout: {\r\n    //         // full list of icons here: https://labs.mapbox.com/maki-icons\r\n    //         \"icon-image\": \"airport-15\", // this icons on our map\r\n    //         \"icon-padding\": 0,\r\n    //         \"icon-allow-overlap\": true,\r\n    //         \"icon-rotation-alignment\": \"map\",\r\n    //         \"icon-rotate\":{\r\n    //           \"property\":\"wind_direction\",\r\n    //           \"stops\": [\r\n    //             [30, 30],\r\n    //             [60, 60],\r\n    //             [90, 90],\r\n    //             [120, 120],\r\n    //             [150, 150],\r\n    //             [180, 180],\r\n    //             [210, 210],\r\n    //             [240, 240],\r\n    //             [270, 270],\r\n    //             [300, 300],\r\n    //             [330, 330],\r\n    //             [360, 360]\r\n    //           ],\r\n    //         }\r\n    //       }\r\n    //     });\r\n\r\n\r\n    //  //getNwsPointsData(map.getCenter().lat, map.getCenter().lng);\r\n    // });\r\n\r\n    // Clean up on unmount\r\n    return () => map.remove();\r\n  }, []); //eslint-disable-line; react-hooks/exhaustive-deps\r\n  // <== useEffect\r\n\r\n  return (\r\n    <div>\r\n      <div className='sidebarStyle'>\r\n        <div>\r\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n        </div>\r\n      </div>\r\n      <div className='map-container' ref={mapContainerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapViewer;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\StationsPopup.js",["135","136","137","138","139"],"import React from \"react\";\r\nimport useSwr, { SWRConfig } from \"swr\";\r\n\r\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\nconst StationsPopup = ({ feature }) => {\r\n  const { id, name, stationIdentifier } = feature.properties;\r\n\r\n  const url = `https://api.weather.gov//stations/${stationIdentifier}/observations/latest`;\r\n  const { data, error } = useSwr(url, { fetcher });\r\n  //const stations = data && !error ? data.slice(0, 2000) : [];\r\n\r\n  console.log(url);\r\n  console.log(data);\r\n  console.log(error);\r\n  \r\n  if (data != null) {\r\n\r\n    var textDescription = data.properties.textDescription;\r\n    var temperature = data.properties.temperature.value;\r\n    var windSpeed = data.properties.windSpeed.value;\r\n    var windGust = data.properties.windGust.value;\r\n\r\n    return (\r\n      <div id={`popup-${id}`}>\r\n        <h3>{name}</h3>\r\n        <p>Conditions: {data.properties.textDescription}</p>\r\n        <p>Temp: {data.properties.temperature.value}C</p>\r\n        <p>Wind: {data.properties.windSpeed.value} km/h</p>\r\n        <p>Gusts: {data.properties.windGust.value} km/h</p>\r\n      </div>\r\n    );\r\n  }\r\n  else if (error) {\r\n    return (\r\n      <div id={`error`}>\r\n        <h3>{error}</h3>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div id={`error`}>\r\n        <p>NWS Data Fetch Error</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default StationsPopup;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsStations_Swr.js",["140","141","142","143"],"// React Custom Hook \r\n// A custom hook is a JavaScript function with a unique naming convention that \r\n// requires the function name to start with \r\n// 'use' and has the ability to call other hooks.\r\n\r\nimport useSwr from 'swr'\r\nimport { useRequestNwsPoints_Swr } from './useRequestNwsPoints_Swr'\r\n\r\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\nexport const useRequestNwsStations_Swr = (_mboxLat, _mboxLng) => {\r\n\r\n    // Get gridId, gridX and gridY from the mBox_Lat & _mBox_Lon parameters\r\n    const { data: pointsData, error: pointsErrors } = useRequestNwsPoints_Swr(_mboxLat, _mboxLng);\r\n\r\n    var _gridId = -'';\r\n    var _gridX = -1;\r\n    var _gridY = -1;\r\n\r\n    if (pointsData != null) {\r\n  \r\n      var _gridId = pointsData.properties.gridId;\r\n      var _gridX = pointsData.properties.gridX;\r\n      var _gridY = pointsData.properties.gridY;\r\n    }\r\n\r\n    console.log(\"_gridId:= \" + _gridId);\r\n    console.log(\"_gridX:= \" + _gridX);\r\n    console.log(\"_gridY:= \" + _gridY);\r\n\r\n\r\n    const urlStations = `https://api.weather.gov/gridpoints/${_gridId}/${_gridX},${_gridY}/stations`;\r\n    console.log(urlStations);\r\n\r\n    const { data: stationsData, error: stationsError } = useSwr(urlStations, { fetcher });\r\n    //const stations = data && !error ? data.slice(0, 2000) : [];\r\n\r\n    //const url = name ? baseUrl + path + '/' + name : baseUrl + path\r\n    //const { data, error } = useSwr(url)\r\n\r\n    console.log(\"stationsData:= \" + stationsData);\r\n    console.log(\"useRequestNwsStations_Swr\");\r\n\r\n    return { stationsData, stationsError }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//import useSwr from 'swr'\r\n//\r\n//const fetcher = (...args) => fetch(...args).then(response => response.json());\r\n//\r\n//export const useRequestNwsStations_Swr  = (gridId, gridX, gridY) => {\r\n//\r\n//    const url = `https://api.weather.gov/gridpoints/${gridId}/${gridX},${gridY}/stations`;\r\n//    const { data, error } = useSwr(url, { fetcher });\r\n//    //const stations = data && !error ? data.slice(0, 2000) : [];\r\n\r\n//    //const url = name ? baseUrl + path + '/' + name : baseUrl + path\r\n//    //const { data, error } = useSwr(url)\r\n//\r\n//   return { data, error }\r\n//}","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NWSStations.js",["144"],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NwsStations.js",["145","146","147","148","149"],"import React, {Component, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst _gridId = \"BOX\"\r\nconst _gridX = 59\r\nconst _gridY = 28\r\n\r\n// Hopefully, this function will return a geo\r\nexport function NwsStations (gridId, gridX, gridY) {\r\n\r\n    const [ NwsStationsState, setNwsStationsState ] = useState({\r\n        loading: false,\r\n        repos: null,\r\n      });\r\n\r\n    const apiUrl = `https://api.weather.gov/gridpoints/${gridId}/${gridX},${gridY}/stations`;\r\n\r\n    useEffect(() => {\r\n        setNwsStationsState.loading = true;\r\n            axios.get(apiUrl).then((repos) => {\r\n              const allRepos = repos.data;\r\n              setNwsStationsState({ loading: false, repos: allRepos }\r\n            );\r\n        });\r\n    }, [setNwsStationsState, apiUrl]);\r\n\r\n    //console.log(\"NwsStations ==> Axios\");\r\n    //console.log( NwsStationsState.repos );\r\n    return NwsStationsState.repos;\r\n        \r\n};\r\nexport default NwsStations;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\api\\NwsStationsAsync.js",["150","151","152","153","154"],"import React, {Component, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst _gridId = \"BOX\"\r\nconst _gridX = 59\r\nconst _gridY = 28\r\n\r\n// Hopefully, this function will return a geo\r\nexport async function NwsStationsAsync (gridId, gridX, gridY) {\r\n\r\n    const [ NwsStationsState, setNwsStationsState ] = useState({\r\n        loading: false,\r\n        repos: null,\r\n      });\r\n\r\n    const apiUrl = `https://api.weather.gov/gridpoints/${gridId}/${gridX},${gridY}/stations`;\r\n\r\n    useEffect(() => {\r\n        setNwsStationsState.loading = true;\r\n            axios.get(apiUrl).then((repos) => {\r\n              const allRepos = repos.data;\r\n              setNwsStationsState({ loading: false, repos: allRepos }\r\n            );\r\n        });\r\n    }, [setNwsStationsState, apiUrl]);\r\n\r\n    console.log(\"NwsStationsAsync ==> Axios\");\r\n    console.log( NwsStationsState.repos )\r\n    return NwsStationsState.repos;\r\n        \r\n};\r\nexport default NwsStationsAsync;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewerClass.js",["155","156","157","158","159","160","161"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2NvbmZvcnRpIiwiYSI6ImNrajkyNnk3MjQ4YmEycnFqYm01cWVqamYifQ.P6dAko2hqzbdSnDOZq9IpA'\r\n//console.log(\"MAPBOX_ACCESS_TOKEN: \" + process.env.REACT_APP_MAPBOX_ACCESS_TOKEN);\r\n\r\nconst _gridId = \"BOX\"\r\nconst _gridX = 59\r\nconst _gridY = 28\r\n\r\nconst _nws_Lat = 41.377894\r\nconst _nws_Lng = 71.635437\r\nconst _nws_Rad = 10\r\n\r\nconst _mBox_Lat = 41.377894\r\nconst _mBox_Lng = -71.635437\r\nconst _mBox_Zoom = 8\r\n\r\nclass MapViewerClass extends React.Component {\r\n    // Code from the next few steps will go here\r\n\r\n    // Store the intial Mapbox setings in the 'state'\r\n    // These values will change as the user interacts with the map\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lng: _mBox_Lng,\r\n            lat: _mBox_Lat,\r\n            zoom: _mBox_Zoom\r\n        };\r\n    }\r\n\r\n\r\n    // Initialing the Map here ensures that Mapbox GL JS will not try to render \r\n    // a map before React creates the element that contains the map.\r\n    componentDidMount() {\r\n        const map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/outdoors-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n\r\n        map.on('move', () => {\r\n            this.setState({\r\n                lng: map.getCenter().lng.toFixed(4),\r\n                lat: map.getCenter().lat.toFixed(4),\r\n                zoom: map.getZoom().toFixed(2)\r\n            });\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default MapViewerClass;\r\n     \r\n//ReactDOM.render(<MapViewerClass />, document.getElementById('map'));","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsStations.js",[],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNwsPoints_Swr.js",["162","163","164","165"],"import useSwr from 'swr'\r\n\r\nexport const useRequestNwsPoints_Swr = (_mboxLat, _mboxLng) => {\r\n\r\n    const fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\n    console.log(\"useRequestNwsPoints_Swr ==> _mboxLat ==> \" + _mboxLat);\r\n    console.log(\"useRequestNwsPoints_Swr ==> _mboxLng ==> \" + _mboxLng);\r\n\r\n    const urlPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n    const { data: pointsData, error: pointsError } = useSwr(urlPoints, { fetcher });\r\n\r\n    //console.log(urlPoints);\r\n    //console.log(pointsData);\r\n    //console.log(pointsError);\r\n\r\n    var _gridId = \"\";\r\n    var _gridX = -1;\r\n    var _gridY = -1;\r\n\r\n    if (pointsData != null) {\r\n  \r\n      var _gridId = pointsData.properties.gridId;\r\n      var _gridX = pointsData.properties.gridX;\r\n      var _gridY = pointsData.properties.gridY;\r\n    }\r\n\r\n    console.log(\"useRequestNwsPoints_Swr ==> _gridId:= \" + _gridId);\r\n    console.log(\"useRequestNwsPoints_Swr ==> _gridX:= \" + _gridX);\r\n    console.log(\"useRequestNwsPoints_Swr ==> _gridY:= \" + _gridY);\r\n\r\n    return { _gridId, _gridX, _gridY };\r\n\r\n    //const stations = data && !error ? data.slice(0, 2000) : [];\r\n\r\n    //const url = name ? baseUrl + path + '/' + name : baseUrl + path\r\n    //const { data, error } = useSwr(url)\r\n\r\n    //console.log(\"useRequestNwsPoints_Swr\");\r\n    //console.log(data);\r\n\r\n   //return { pointsData, pointsError }\r\n}","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\useRequestNOAABuoy_Swr.js",[],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer_v2.js",["166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport './../Map.css';\r\n\r\nimport axios from 'axios';\r\nimport xml2js from 'xml2js';\r\n\r\n//import { Container, Navbar, Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'react-bootstrap';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2NvbmZvcnRpIiwiYSI6ImNrajkyNnk3MjQ4YmEycnFqYm01cWVqamYifQ.P6dAko2hqzbdSnDOZq9IpA'\r\n\r\nconst _gridId = \"BOX\";\r\nconst _gridX = 59;\r\nconst _gridY = 28;\r\n\r\n//const urlNwsPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n//const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId}/${_gridX},${_gridY}/stations`;\r\n\r\nconst _mBox_Lat = 41.377894;\r\nconst _mBox_Lng = -71.635437;\r\n//const _mBox_Lat = 41.3779;\r\n//const _mBox_Lng = -71.6354;\r\nconst _mBox_Zoom = 8;\r\n\r\nconst ndbRadius = 100;\r\n\r\nfunction MapViewer_v2 () {\r\n    const mapContainerRef = useRef(null);\r\n    console.log(\"const ==> MapViewer\");\r\n  \r\n    // Ok, for this iteration we are only going to \r\n    // include: lng, lat and zoom in 'state' ascurrently\r\n    // they are the only values being displayed as a side effect.\r\n    const [lng, setLng] = useState(_mBox_Lng);\r\n    const [lat, setLat] = useState(_mBox_Lat);\r\n    const [zoom, setZoom] = useState(_mBox_Zoom);\r\n\r\n    const [nwsStations, setNwsStations] = useState([]);\r\n    const [ndbcStations, setNdbcStations] = useState([]);\r\n    const [stationWindData, setStationWindData] = useState([]);\r\n\r\n    const [map_control, setMapControl] = useState();\r\n\r\n    var mapSources = [\"station-wind-data\", \"nws-station-data\", \"ndbc-station-data\"];\r\n    var mapLayers = [\"station-wind-layer\", \"nws-station-layer\", \"ndbc-station-layer\"];\r\n\r\n  // Initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      id: \"mapbox_ref\",\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n\r\n    setMapControl(map);\r\n\r\n    const getStationsData = async (_gridId, _gridX, _gridY) => {\r\n      const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId}/${_gridX},${_gridY}/stations`;\r\n      //console.log(\"urlNwsStations:= \" + urlNwsStations);\r\n\r\n      // // ==> axios w/o Set State <==\r\n      // const response = await axios(urlNwsStations);\r\n      // return await response.data;\r\n\r\n      // ==> fetch <==\r\n      //const response = await fetch(urlNwsStations);\r\n      //const data = await response.json();\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNwsStations);\r\n      const data = await response.data;\r\n      console.log(\"==> NdbcStations Data Loaded <==\");\r\n      \r\n      return data;\r\n    };\r\n  \r\n\r\n    const getNdbcStationsData = async (_mboxLat, _mboxLng) => {\r\n      //const urlNdbcStations = `https://www.ndbc.noaa.gov/rss/ndbc_obs_search.php?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      const urlNdbcStations = `http://localhost:8080/?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      //console.log(\"getNdbcStationsData URL ==> \" + urlNdbcStations);\r\n\r\n      /* Properties:\r\n        ==> id\r\n        ==> updated\r\n\r\n        ==> wind_direction\r\n        ==> wind_speed\r\n        ==> wind_gust\r\n        ==> air_temperature\r\n        ==> water_temperature\r\n        ==> longitude\r\n        ==> latitude\r\n      */\r\n\r\n      // Return object\r\n      const newFeaturesList = [];\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNdbcStations);\r\n      //return await response.data;\r\n      const data = await response.data;\r\n      //console.log(data);\r\n\r\n      // ==> axios <==\r\n      // const response = await axios(urlNdbcStations);\r\n      // const data = await response.data;\r\n      // setNwsStations(data);\r\n\r\n      // Parse baby... parse...\r\n\r\n      // The result object below will be in JSON format\r\n      var parseString = require('xml2js').parseString;\r\n      parseString(data, function (err, result) {\r\n        //console.log(util.inspect(result, false, null));\r\n\r\n        // Re-name the 'georss:point' node\r\n        var resultStringInit = JSON.stringify(result); \r\n        var resultString = resultStringInit.replaceAll('georss:point','geopoint');\r\n        const valuesArray = JSON.parse(resultString);\r\n\r\n        // Drill-down to the channel level\r\n        // There should be only ONE channel node\r\n        // Properties Spread Notation\r\n        var stationData = [...valuesArray.rss.channel];\r\n\r\n        // Iterate through the Station data\r\n        stationData[0].item.map((station) => {\r\n          //console.log('title: ' + station.title);\r\n          //console.log('geopoint: ' + station.geopoint);\r\n          //onsole.log('link: ' + station.link.toString().trim());\r\n\r\n            // Skip all 'SHIP' title entries\r\n            if (station.title.toString().toLowerCase() !== 'ship') {\r\n            //console.log('geopoint: ' + station.title);\r\n          \r\n            // ==> id\r\n            // From station.link\r\n            var checkLinkIndex = station.link.toString().trim().lastIndexOf(\"station=\");\r\n            let stationId = station.link.toString().trim().substring(checkLinkIndex + 8);\r\n            let statId = stationId;\r\n            \r\n            // ==> coords\r\n            var coords = station.geopoint.toString().split(\" \");\r\n            // ==> latitude\r\n            let latitude = coords[0];\r\n            // ==> longitude\r\n            let longitude = coords[1];\r\n\r\n            // console.log('stationId: ' + statId);\r\n            // console.log('latitude: ' + latitude);\r\n            // console.log('longitude: ' + longitude);\r\n\r\n            let updated = '';\r\n            let wind_direction = '';\r\n            let wind_speed = '';\r\n            let wind_gust = '';\r\n            let air_temperature = '';\r\n            let water_temperature = '';\r\n            let wind_degrees = '';\r\n            let water_degrees = '';\r\n\r\n            //OK, now that we have it, how the hell do I parse out the Description data!!!!\r\n            var parseDesc = station.description.toString().split('<br />');\r\n            for (let i=0; i < parseDesc.length; i++) {\r\n              //console.log(parseDesc[i]);\r\n\r\n              // Get her all warshed out!\r\n              var strippedDescItem = parseDesc[i].replaceAll('<strong>','').replaceAll('</strong>','').trim();\r\n              if (strippedDescItem.length > 0 ) {\r\n                //console.log(strippedDescItem)\r\n\r\n                // Remove the 'degrees' symbol\r\n                var strippedItem = strippedDescItem.replaceAll('&#176;', '');\r\n\r\n                if (strippedItem.indexOf('Wind Speed') > -1) {\r\n                  var chkItem_ws = strippedItem.toString().split(\":\");\r\n                  wind_speed = chkItem_ws[1];\r\n\r\n                  //console.log(\"Wind Speed ==> \" + wind_speed);\r\n                } else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                  var chkItem_wd = strippedItem.toString().split(\":\");\r\n                  wind_direction = chkItem_wd[1];\r\n\r\n                  //console.log(\"Wind Direction ==> \" + wind_direction);\r\n                } else if (strippedItem.indexOf('Wind Gust') > -1) {\r\n                  var chkItem_wg = strippedItem.toString().split(\":\");\r\n                  wind_gust = chkItem_wg[1];\r\n\r\n                  //console.log(\"Wind Gust ==> \" + wind_gust);\r\n                } else if (strippedItem.indexOf('Air Temperature') > -1) {\r\n                  var chkItem_at = strippedItem.toString().split(\":\");\r\n                  air_temperature = chkItem_at[1];\r\n\r\n                  //console.log(\"Air Temperature ==> \" + air_temperature);\r\n                } else if (strippedItem.indexOf('Water Temperature') > -1) {\r\n                  var chkItem_wt = strippedItem.toString().split(\":\");\r\n                  water_temperature = chkItem_wt[1];\r\n\r\n                  //console.log(\"Water Temperature ==> \" + water_temperature);\r\n                } \r\n                //   else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                //   var chkItem = strippedItem.toString().split(\":\");\r\n                //   wind_direction = chkItem[1];\r\n\r\n                //   console.log(\"Wind Direction ==> \" + wind_speed);\r\n                // }\r\n\r\n              }\r\n            }\r\n\r\n            // Create a 'newFeaturesList' object and pusgh it into the  \r\n            newFeaturesList.push({\r\n              type: 'Feature',\r\n              geometry: {\r\n                type: 'Point',\r\n                coordinates: [longitude, latitude],\r\n              },\r\n              properties: {\r\n                id: statId,\r\n                updated: updated,\r\n                wind_direction: wind_direction,\r\n                wind_speed: wind_speed,\r\n                wind_gust: wind_gust,\r\n                air_temperature: air_temperature,\r\n                water_temperature: water_temperature,\r\n              },\r\n            });\r\n          }\r\n\r\n        }); // Iterate through the Station data\r\n      });\r\n\r\n      console.log(\"==> NdbcStations Data Loaded <==\");\r\n\r\n      return await Promise.resolve({\r\n        type: 'FeatureCollection',\r\n        features: newFeaturesList,\r\n      });\r\n\r\n    };\r\n\r\n    /****************************************************************************\r\n     * \r\n     *  This function will compile Feature Collection of wind related data from\r\n     *  NWS and NOAA Stations that will include:\r\n     * \r\n     *  ==> wind_direction\r\n     *  ==> wind_speed\r\n     *  ==> longitude\r\n     *  ==> latitude\r\n     * \r\n     *****************************************************************************/\r\n    const getStationWindData = async (_mboxLat, _mboxLng) => {\r\n\r\n      // Return object\r\n      const windDataFeaturesList = [];\r\n\r\n      /* OK, this call has hosed us before, but let's see what happens here anyway */\r\n      const urlNwsPoints = `https://api.weather.gov/points/${_mboxLat},${_mboxLng}`;\r\n      //console.log(urlNwsPoints);\r\n\r\n      const resp_Points = await axios(urlNwsPoints);\r\n      const data_Points = await resp_Points.data;\r\n\r\n      // Get the GridID and X,Y coordinates for the NWS Stations API call below:\r\n      var _gridId_resp = data_Points.properties.gridId;\r\n      var _gridX_resp = data_Points.properties.gridX;\r\n      var _gridY_resp = data_Points.properties.gridY;\r\n\r\n      //console.log(\"getStationWindData == > _gridId_resp: ==> \" + _gridId_resp);\r\n      //console.log(\"getStationWindData == >_gridX_resp: ==> \" + _gridX_resp);\r\n      //console.log(\"getStationWindData == >_gridY_resp: ==> \" + _gridY_resp);\r\n\r\n      /****************/\r\n      /* NWS Stations */\r\n      /****************/\r\n      const urlNwsStations = `https://api.weather.gov/gridpoints/${_gridId_resp}/${_gridX_resp},${_gridY_resp}/stations`;\r\n      //console.log(\"urlNwsStations:= \" + urlNwsStations);\r\n\r\n      // ==> axios w/o Set State <==\r\n      const resp_NwsStations = await axios(urlNwsStations);\r\n      const nwsStations = await resp_NwsStations.data; //.json();\r\n      //console.log(\"nwsStations:= \" + nwsStations);\r\n\r\n      // ==> fetch <==\r\n      //const response = await fetch(urlNwsStations);\r\n      //const data = await response.json();\r\n  \r\n      // Parse, baby parse....\r\n      // So we should now have a result set of NWS stations\r\n      // Iterate through these and grab the 'id' property which \r\n      // will containthe following link:  \r\n      //        https://api.weather.gov/stations/KBID\r\n      //\r\n      // To obtain Station Data, append the link with the following:\r\n      //        /observations/latest\r\n      //\r\n      // Send a request to this API url and then parse out the wind data\r\n\r\n      //var statsKeys =  Object.keys(nwsStations);\r\n      //console.log(\"Found (Object.keys): \"  + statsKeys);\r\n      //statsKeys.map((key) => {\r\n      //  console.log(key, statsKeys[key]);\r\n      //});\r\n\r\n      // OK, find the 'observationStations' array data\r\n      // This notation is better that the hard-coded index option.\r\n      console.log(\"Parse NWS Stations ==> \");\r\n      Object.keys(nwsStations).map(async (key) => {\r\n        //console.log(key, nwsStations[key]);\r\n\r\n        var station_id = null;\r\n        var stat_lon_coord = null;\r\n        var stat_lat_coord = null;\r\n        var stat_windDirection = null;\r\n        var stat_windSpeed = null;\r\n        var stat_Identifier = null;\r\n        var stat_Name = null;\r\n\r\n        // if (key === \"observationStations\"){\r\n        //   console.log(\"Observation Stations: ==> \");\r\n        //   nwsStations[key].map(async (stationUrl) => {\r\n        if (key === \"features\"){\r\n          //console.log(\"features: ==> \");\r\n          nwsStations[key].map(async (stat_Features) => {\r\n            //console.log(\"stat_Features ==>\");\r\n            //console.log(stat_Features);\r\n\r\n            var stationUrl = stat_Features.id.toString();\r\n            //console.log(\"stationUrl: \" + stationUrl);\r\n\r\n            // Create the URL to grab the individual Station Data  \r\n            var stationDataUrl = `${stationUrl}/observations/latest`;\r\n            // ==> axios w/o Set State <==\r\n            const stationResponse = await axios(stationDataUrl);\r\n            //return await response.data;\r\n            const stationData = await stationResponse.data;\r\n            //console.log(\"Station Data: \" + stationData);\r\n\r\n            Object.keys(stationData).map(async (key1) => {\r\n              //console.log(key1, stationData[key1]);\r\n\r\n              // We need the geometry key to access the co-ordinates\r\n              //console.log(\"stationData: \" + key1);\r\n              if (key1 === \"geometry\") {\r\n\r\n                stat_lon_coord = stationData[key1].coordinates[0];\r\n                stat_lat_coord = stationData[key1].coordinates[1];\r\n\r\n              };\r\n\r\n              // We need the properties key to access \r\n              // ==> windDirection\r\n              // ==> windSpeed\r\n              // ==> windGust\r\n              if (key1 === \"properties\") {\r\n\r\n                stat_windSpeed = stationData[key1].windSpeed.value;\r\n\r\n                var conv_windDirection = stationData[key1].windDirection.value;\r\n                //console.log(\"conv_windDirection ==> \" + conv_windDirection);\r\n\r\n                var convert_deg = parseInt(conv_windDirection) + 180;\r\n                if (convert_deg >= 360)\r\n                  convert_deg = convert_deg - 360;\r\n\r\n                stat_windDirection = convert_deg;\r\n                //console.log(\"stat_windDirection ==> \" + stat_windDirection);\r\n              }\r\n\r\n            }); // stationData\r\n\r\n            station_id = stat_Features.properties.stationIdentifier;\r\n            stat_Identifier = stat_Features.properties.stationIdentifier;\r\n            stat_Name = stat_Features.properties.name;\r\n\r\n            // Add NWS Station data. if it qualifies.\r\n            //\r\n            // Check for BOTH wind_direction AND sta_windSpeed\r\n            // values, otherwise skip on down...\r\n            if (!(stat_windDirection == null && stat_windSpeed == null))\r\n            {\r\n              //if (stat_windDirection > 0 && stat_windSpeed > 0) {\r\n\r\n                // Convert km/h to knots !!!\r\n                // divisor speed (km/h) / 1.852\r\n                var stat_wind_knots = stat_windSpeed / 1.852;\r\n\r\n                // Convert kmh to mph !!!\r\n                // divisor speed (km/h) / 1.852\r\n                var stat_wind_mph = stat_windSpeed / 1.852;\r\n\r\n                // Create a 'windDataFeaturesList' object and push it into the return object\r\n                //console.log(\"Push ==> NWS Station: \" + station_id);\r\n                windDataFeaturesList.push({\r\n                  type: 'Feature',\r\n                  geometry: {\r\n                    type: 'Point',\r\n                    coordinates: [stat_lon_coord, stat_lat_coord],\r\n                  },\r\n                  properties: {\r\n                    id: station_id,\r\n                    name: stat_Name,\r\n                    type: \"NWS\",\r\n                    wind_direction: stat_windDirection,\r\n                    wind_speed: stat_wind_knots.toFixed(0),\r\n                  },\r\n                });\r\n\r\n              //}\r\n\r\n              //console.log(\" ==> Nws Stations <==\");\r\n            }\r\n            \r\n          }); //Nws Stations\r\n        }\r\n      });\r\n\r\n\r\n      /************************/\r\n      /* NOAA (NDBC) Stations */\r\n      /************************/\r\n      console.log(\"NOAA (NDBC) Stations ==> \");\r\n      const urlNdbcStations = `http://localhost:8080/?lat=${_mboxLat}N&lon=${(_mboxLng * -1)}W&radius=100`;\r\n      //console.log(\"getNdbcStationsData URL ==> \" + urlNdbcStations);\r\n\r\n      // ==> axios w/o Set State <==\r\n      const response = await axios(urlNdbcStations);\r\n      //return await response.data;\r\n      const data = await response.data;\r\n      //console.log(data);\r\n\r\n      // The result object below will be in JSON format\r\n      var parseString = require('xml2js').parseString;\r\n      parseString(data, function (err, result) {\r\n        //console.log(util.inspect(result, false, null));\r\n        //var resultFull = util.inspect(result, false, null);\r\n\r\n        // Create Feature Collection here:\r\n        // OK, result object above will be in JSON format\r\n\r\n        // Re-name the 'georss:point' node\r\n        var resultStringInit = JSON.stringify(result); \r\n        var resultString = resultStringInit.replaceAll('georss:point','geopoint');\r\n        const valuesArray = JSON.parse(resultString);\r\n\r\n        // Drill-down to the channel level\r\n        // There should be only ONE channel node\r\n        // Properties Spread Notation\r\n        var stationData = [...valuesArray.rss.channel];\r\n\r\n        // Iterate through the Station data\r\n        stationData[0].item.map(async (station) => {\r\n            // Skip all 'SHIP' title entries\r\n            if (station.title.toString().toLowerCase() !== 'ship') {\r\n            //console.log('geopoint: ' + station.title);\r\n          \r\n            // ==> id\r\n            // From station.link\r\n            var checkLinkIndex = station.link.toString().trim().lastIndexOf(\"station=\");\r\n            var stationId = station.link.toString().trim().substring(checkLinkIndex + 8);\r\n            var statId = stationId.toUpperCase();\r\n            var stat_title = station.title.toString();\r\n\r\n            // Attempt to grab the NOAA (NDBC) Id to remove\r\n            // it from the Station title (Name)\r\n            //var regExp_title = /\\-([^-]+)\\-/\r\n            var regExp_title = /-([0-9\\s]+)-/;\r\n            var title_match = regExp_title.exec(stat_title);\r\n          \r\n            if (title_match != null) {\r\n              let t_Match = title_match[0];\r\n              stat_title = stat_title.replace(t_Match, '-');\r\n            }\r\n  \r\n            // ==> coords\r\n            var coords = station.geopoint.toString().split(\" \");\r\n            // ==> latitude\r\n            var sta_latitude = coords[0];\r\n            var latitude = parseFloat(sta_latitude.toString(), 2);\r\n            // ==> longitude\r\n            var sta_longitude = coords[1];\r\n            var longitude = parseFloat(sta_longitude.toString(), 2);\r\n            \r\n            let wind_direction = null; //'';\r\n            let wind_speed =  null; //'';\r\n\r\n            //OK, now that we have it, how the hell do I parse out the Description data!!!!\r\n            var parseDesc = station.description.toString().split('<br />');\r\n            for (let i=0; i < parseDesc.length; i++) {\r\n              //console.log(parseDesc[i]);\r\n\r\n              // Get her all warshed out!\r\n              var strippedDescItem = parseDesc[i].replaceAll('<strong>','').replaceAll('</strong>','').trim();\r\n              if (strippedDescItem.length > 0 ) {\r\n                //console.log(strippedDescItem)\r\n\r\n                // Remove the 'degrees' symbol\r\n                var strippedItem = strippedDescItem.replaceAll('&#176;', '');\r\n\r\n                if (strippedItem.indexOf('Wind Speed') > -1) {\r\n                  var chkItem_wp = strippedItem.toString().split(\":\");\r\n                  wind_speed = chkItem_wp[1];\r\n                } else if (strippedItem.indexOf('Wind Direction') > -1) {\r\n                  var chkItem_wd = strippedItem.toString().split(\":\");\r\n                  wind_direction = chkItem_wd[1];\r\n                } \r\n              }\r\n            }\r\n\r\n            //console.log(\"Wind Speed ==> \" + wind_speed);\r\n            //console.log(\"Wind Direction ==> \" + wind_direction);\r\n            if (!(wind_direction == null && wind_speed == null))\r\n            {\r\n              // Knots\r\n              var speed_knots = wind_speed.replaceAll('knots','').trim();\r\n              \r\n              // Degrees - Wind direction\r\n              // Pull out the drgrees from the \r\n              //var regExp = new RegExp(\"/\\(([^)]+)\\)/\");\r\n              var regExp = /\\(([^)]+)\\)/;\r\n              var wind_matches = regExp.exec(wind_direction);\r\n              var dir_degrees = wind_direction;\r\n\r\n              var dir_Text = wind_direction;\r\n\r\n              if (wind_matches != null) {\r\n                let w_Match = wind_matches[1];\r\n                //console.log(\"w_Match ==> \" + w_Match);\r\n\r\n                // Wind direction must me an int\r\n                // There should alway be a value here at this point\r\n                // dir_degrees = parseInt(w_Match);\r\n\r\n                // Rememeber, wind direction is where \r\n                // three wind in coming from!!\r\n                var convert_deg_NOAA = parseInt(w_Match) + 180;\r\n                if (convert_deg_NOAA >= 360)\r\n                    convert_deg_NOAA = convert_deg_NOAA - 360;\r\n\r\n                dir_degrees = convert_deg_NOAA;\r\n              }\r\n\r\n              // Create a 'windDataFeaturesList' object and push it into the return object\r\n              windDataFeaturesList.push({\r\n                type: 'Feature',\r\n                geometry: {\r\n                  type: 'Point',\r\n                  coordinates: [longitude, latitude],\r\n                },\r\n                properties: {\r\n                  id: statId,\r\n                  name: stat_title,\r\n                  type: \"NOAA\",\r\n                  wind_direction: dir_degrees,\r\n                  wind_speed: speed_knots,\r\n                },\r\n              });\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }); // Iterate through the Station data\r\n      });\r\n\r\n      // return Promise.resolve({\r\n      //   type: 'FeatureCollection',\r\n      //   features: windDataFeaturesList,\r\n      // });\r\n\r\n      var FeatureCollection = {\r\n        type: \"FeatureCollection\",\r\n        features: windDataFeaturesList\r\n      }\r\n\r\n      //console.log(FeatureCollection);\r\n      console.log(\" ==> Wind Data Loaded <==\");\r\n\r\n      // var sourceWindData = new mapboxgl.GeoJSONSource({\r\n      //   data: FeatureCollection\r\n      // })\r\n      // console.log(sourceWindData);\r\n\r\n      return Promise.resolve(FeatureCollection);\r\n    };\r\n\r\n\r\n    // \r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    map.resize();\r\n    map.addControl(new mapboxgl.NavigationControl(), 'top-right');\r\n\r\n    // https://gis.stackexchange.com/questions/240134/mapbox-gl-js-source-loaded-event\r\n\r\n    /*\r\n    map.once('styledata', loadTiles);   //The listener will be called first time the event fires after the listener is registered.\r\n\r\n    map.on(\"styledata\", loadTiles);    // will fire multiple 3 times, whenever style changed.  \r\n                                       // event.stopPropagation(); does not work.\r\n\r\n    map.on(\"load\", loadTiles);         // only fire 1 time. but when you change base map, use below\r\n\r\n    map.setStyle('mapbox://styles/mapbox/' + layerId, {diff: false});\r\n                                       //  on load event will not fire, which I need it fire to re-load geojson layer. \r\n\r\n    map.on(\"styledata\"    // works fine, but it fire 3 same event at same time, cause load 3 times geojson layer, cause other error when you load 3 times geojson layer at same time.\r\n    */\r\n\r\n    //map.on(\"load\", function () {\r\n    //map.on('style.load', function() {\r\n    map.on(\"load\", () => {\r\n      // add the data source for new a feature collection with no features\r\n      console.log(\"map.on('style.load')\");\r\n\r\n      // The Data must lie in state!!!\r\n      getStationsData(_gridId, _gridX, _gridY) //;\r\n      .then(async nwsData => {\r\n        if (nwsData.type === \"FeatureCollection\")\r\n        {\r\n          setNwsStations(nwsData);\r\n          //console.log(nwsStations);\r\n          //console.log(\"getStationsData (Set State Results) ==> \" + nwsData.type);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"ERROR ==> getStationsData: \" + JSON.stringify(error));\r\n      });\r\n  \r\n      // Call asyc getNdbcStationsData\r\n      // Set State below or check for error\r\n      getNdbcStationsData(_mBox_Lat, _mBox_Lng)\r\n      .then(ndbcData => {\r\n        setNdbcStations(ndbcData);\r\n        //console.log(ndbcStations);\r\n        //console.log(\"getNdbcStationsData (Set State Results)\");\r\n      })\r\n      .catch(error => {\r\n        console.log(\"ERROR ==> getNdbcStationsData: \" + JSON.stringify(error));\r\n      });\r\n  \r\n      // Call asyc getStationWindData\r\n      // Set State below or check for error\r\n      getStationWindData(_mBox_Lat, _mBox_Lng)\r\n      .then(windData => {\r\n        setStationWindData(windData);\r\n        //console.log(\"getStationWindData (Set State Results)\");\r\n        //console.log(stationWindData);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"ERROR ==> getStationWindData: \" + JSON.stringify(error));\r\n      });\r\n\r\n      // OK, let's try this!!!!\r\n      \r\n      // // Call asyc getStationWindData\r\n      // getStationWindData(_mBox_Lat, _mBox_Lng)\r\n      // .then(windData => {\r\n      //     //console.log(\"getStationWindData ==> windData\");\r\n          \r\n      //     /* Station Wind Data */\r\n      //     // windData should be a viable FeatureCollection object\r\n      //     // and at this point should be completely poputaled and available !!\r\n\r\n      //     //console.log(windData);\r\n      //     map.addSource(\"station-wind-data\", {\r\n      //         type: \"geojson\",\r\n      //         data: windData\r\n      //     }); //.loaded(() => {\r\n      //         // do some stuff\r\n      //         //console.log(\"map.addLayer\");\r\n\r\n      //       map.addLayer({\r\n      //           id: \"station-wind-layer\",\r\n      //           source: \"station-wind-data\",\r\n      //           type: \"symbol\",\r\n      //           layout: {\r\n      //             // full list of icons here: https://labs.mapbox.com/maki-icons\r\n      //             \"icon-image\": \"airport-15\", // this icons on our map\r\n      //             \"icon-padding\": 0,\r\n      //             \"icon-allow-overlap\": true,\r\n      //             \"icon-rotation-alignment\": \"map\",\r\n      //             \"icon-rotate\":{\r\n      //               \"property\":\"wind_direction\",\r\n      //               \"stops\": [\r\n      //                 [30, 30],\r\n      //                 [60, 60],\r\n      //                 [90, 90],\r\n      //                 [120, 120],\r\n      //                 [150, 150],\r\n      //                 [180, 180],\r\n      //                 [210, 210],\r\n      //                 [240, 240],\r\n      //                 [270, 270],\r\n      //                 [300, 300],\r\n      //                 [330, 330],\r\n      //                 [360, 360]\r\n      //               ],\r\n      //             }\r\n      //           }\r\n      //       });\r\n\r\n      //       // change cursor to pointer when user hovers over a clickable feature\r\n      //       map.on(\"mouseenter\", \"station-wind-layer\", e => {\r\n      //         if (e.features.length) {\r\n      //           map.getCanvas().style.cursor = \"pointer\";\r\n      //         }\r\n      //       });\r\n\r\n      //       // reset cursor to default when user is no longer hovering over a clickable feature\r\n      //       map.on(\"mouseleave\", \"station-wind-layer\", () => {\r\n      //         map.getCanvas().style.cursor = \"\";\r\n      //       });\r\n              \r\n      //     //});\r\n\r\n      //     // console.log(\"Query ==> station-wind-layer\")\r\n      //     // const qtyWindData = map.querySourceFeatures(\"station-wind-layer\");\r\n      //     // console.log(qtyWindData)\r\n      // })\r\n      // .catch(error => {\r\n      //     console.log(\"ERROR ==> getStationWindData: \" + JSON.stringify(error));\r\n      // });\r\n\r\n\r\n\r\n\r\n      // /* ==> getStationsData  */\r\n      // // Call asyc getStationsData\r\n      // // Set State below or check for error\r\n      // getStationsData(_gridId, _gridX, _gridY) //;\r\n      // .then(nwsStationData => {\r\n      //   if (nwsStationData.type === \"FeatureCollection\")\r\n      //   {\r\n      //     setNwsStations(nwsStationData); \r\n\r\n      //     map.addSource(\"nws-station-data\", {\r\n      //       type: \"geojson\",\r\n      //       data: nwsStationData,\r\n      //     });\r\n    \r\n      //       // now add the layer, and reference the data source above by name\r\n      //       map.addLayer({\r\n      //         id: \"nws-station-layer\",\r\n      //         source: \"nws-station-data\",\r\n      //         type: \"symbol\",\r\n      //         layout: {\r\n      //           // full list of icons here: https://labs.mapbox.com/maki-icons\r\n      //           \"icon-image\": \"castle-15\", // this icons on our map\r\n      //           \"icon-padding\": 0,\r\n      //           \"icon-allow-overlap\": true\r\n      //         }\r\n      //       });\r\n      //   }\r\n      // })\r\n      // .catch(error => {\r\n      //   console.log(JSON.stringify(error));\r\n      // });\r\n    \r\n\r\n      // /* ==> getNdbcStationsData  */\r\n      // // Call asyc getNdbcStationsData\r\n      // // Set State below or check for error\r\n      // getNdbcStationsData(_mBox_Lat, _mBox_Lng)\r\n      // .then(ndbcStationData => {\r\n\r\n      //   setNdbcStations(ndbcStationData);\r\n\r\n      //     /* NOAA Station Data */\r\n      //     map.addSource(\"ndbc-station-data\", {\r\n      //       type: \"geojson\",\r\n      //       data:  ndbcStationData,\r\n      //     });\r\n\r\n      //       // now add the layer, and reference the data source above by name\r\n      //       map.addLayer({\r\n      //         id: \"ndbc-station-layer\",\r\n      //         source: \"ndbc-station-data\",\r\n      //         type: \"symbol\",\r\n      //         layout: {\r\n      //           // full list of icons here: https://labs.mapbox.com/maki-icons\r\n      //           \"icon-image\": \"cemetery-15\", // this icons on our map\r\n      //           \"icon-padding\": 0,\r\n      //           \"icon-allow-overlap\": true\r\n      //         }\r\n      //       });\r\n      // })\r\n      // .catch(error => {\r\n      //   console.log(JSON.stringify(error));\r\n      // });\r\n    \r\n\r\n\r\n\r\n\r\n    });\r\n\r\n    // Set the state values for the 'sidebar'\r\n    map.on('move', () => {\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n    });\r\n\r\n    // Clean up on unmount\r\n    return () => map.remove();\r\n  }, []); //eslint-disable-line; react-hooks/exhaustive-deps\r\n  // <== useEffect\r\n\r\n\r\n  const openNav = () => {\r\n    document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n    // document.getElementById(\"mapbox_main\").style.marginLeft = \"250px\";\r\n  }\r\n  \r\n  const closeNav = () => {\r\n    document.getElementById(\"mySidebar\").style.width = \"0\";\r\n    // document.getElementById(\"mapbox_main\").style.marginLeft= \"0\";\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"==> toggleSidebar <==\");\r\n    if (document.getElementById(\"mySidebar\").style.width === \"0px\"\r\n        || document.getElementById(\"mySidebar\").style.width === \"\") {\r\n       document.getElementById(\"mySidebar\").style.width = \"250px\";\r\n    } else {\r\n      document.getElementById(\"mySidebar\").style.width = \"0px\";\r\n    }\r\n  }\r\n\r\n  const loadMapLayer = (layerId) => {\r\n    console.log(\"==> loadMapLayer ==> LayerId: \" + layerId);\r\n\r\n    // Tidy Up!!!\r\n    // Layers First..\r\n    for(var i = 0; i < mapLayers.length; i++) { \r\n      if (map_control.getLayer(mapLayers[i]) != null)\r\n          map_control.removeLayer(mapLayers[i]);\r\n    }\r\n\r\n    // Sources next...\r\n    for(var j = 0; j < mapSources.length; j++) { \r\n      if (map_control.getSource(mapSources[j]) != null)\r\n          map_control.removeSource(mapSources[j]);\r\n    }\r\n\r\n    switch(layerId) {\r\n      /* Wind Map  */\r\n      case 1:\r\n\r\n        console.log(\"StationWindData ==> from State\");\r\n        console.log(stationWindData);\r\n\r\n        if (stationWindData.type === \"FeatureCollection\"){\r\n\r\n          map_control.addSource(\"station-wind-data\", {\r\n              type: \"geojson\",\r\n              data: stationWindData\r\n          }); \r\n\r\n            map_control.addLayer({\r\n              id: \"station-wind-layer\",\r\n              source: \"station-wind-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"airport-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true,\r\n                \"icon-rotation-alignment\": \"map\",\r\n                \"icon-rotate\":{\r\n                  \"property\":\"wind_direction\",\r\n                  \"stops\": [\r\n                    [30, 30],\r\n                    [60, 60],\r\n                    [90, 90],\r\n                    [120, 120],\r\n                    [150, 150],\r\n                    [180, 180],\r\n                    [210, 210],\r\n                    [240, 240],\r\n                    [270, 270],\r\n                    [300, 300],\r\n                    [330, 330],\r\n                    [360, 360]\r\n                  ],\r\n                }\r\n              }\r\n          });\r\n\r\n          // change cursor to pointer when user hovers over a clickable feature\r\n          map_control.on(\"mouseenter\", \"station-wind-layer\", e => {\r\n            if (e.features.length) {\r\n              map_control.getCanvas().style.cursor = \"pointer\";\r\n            }\r\n          });\r\n\r\n          // reset cursor to default when user is no longer hovering over a clickable feature\r\n          map_control.on(\"mouseleave\", \"station-wind-layer\", () => {\r\n            map_control.getCanvas().style.cursor = \"\";\r\n          });\r\n\r\n        }\r\n       \r\n        break;\r\n      /* Stations and Buoys  */\r\n      case 2:\r\n\r\n        console.log(\"NWS StationData ==> from State\");\r\n        console.log(nwsStations);\r\n        console.log(\"NDBC Station Data ==> from State\");\r\n        console.log(ndbcStations);\r\n\r\n        // OK, can we find the MapBox Control here???\r\n        // If not I will be Fucking PISSED!!!!!\r\n\r\n        if (nwsStations.type === \"FeatureCollection\")\r\n        {\r\n          map_control.addSource(\"nws-station-data\", {\r\n            type: \"geojson\",\r\n            data: nwsStations,\r\n          });\r\n    \r\n            // now add the layer, and reference the data source above by name\r\n            map_control.addLayer({\r\n              id: \"nws-station-layer\",\r\n              source: \"nws-station-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"castle-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true\r\n              }\r\n            });\r\n        }\r\n\r\n        if (ndbcStations.type === \"FeatureCollection\")\r\n        {\r\n          /* NOAA Station Data */\r\n          map_control.addSource(\"ndbc-station-data\", {\r\n            type: \"geojson\",\r\n            data:  ndbcStations,\r\n          });\r\n\r\n            // now add the layer, and reference the data source above by name\r\n            map_control.addLayer({\r\n              id: \"ndbc-station-layer\",\r\n              source: \"ndbc-station-data\",\r\n              type: \"symbol\",\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                \"icon-image\": \"cemetery-15\", // this icons on our map\r\n                \"icon-padding\": 0,\r\n                \"icon-allow-overlap\": true\r\n              }\r\n            });\r\n        }\r\n\r\n        // change cursor to pointer when user hovers over a clickable feature\r\n        map_control.on(\"mouseenter\", \"station-wind-layer\", e => {\r\n          if (e.features.length) {\r\n            map_control.getCanvas().style.cursor = \"pointer\";\r\n          }\r\n        });\r\n\r\n        // reset cursor to default when user is no longer hovering over a clickable feature\r\n        map_control.on(\"mouseleave\", \"station-wind-layer\", () => {\r\n          map_control.getCanvas().style.cursor = \"\";\r\n        });\r\n        \r\n        break;\r\n      /* Wind Map  */\r\n      default:\r\n        \r\n    }\r\n  }\r\n\r\n  return (\r\n      <div >\r\n          <div className='nav-container'>\r\n              <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\" >\r\n                <Button onClick={toggleSidebar} className='openbtn' variant=\"outline-info\">☰</Button>\r\n                <Navbar.Brand className='navbarLink' href=\"#home\">Fish Finders</Navbar.Brand>\r\n              </Navbar>      \r\n          </div>\r\n          <div id='mapbox_main' className='map-wrapper'>\r\n            <div className='mapInfoStyle'>\r\n              <div>\r\n                  Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n              </div>\r\n            </div>\r\n            <div className='map-container' ref={mapContainerRef} />\r\n          </div>\r\n          <div id=\"mySidebar\" className=\"sidebar\">\r\n            <Accordion className='accordion-custom' defaultActiveKey=\"0\">\r\n              <Card className='card-custom'>\r\n                <Accordion.Toggle className='card-header-custom' as={Card.Header} eventKey=\"0\">\r\n                  Maps\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body className='card-body-custom'>\r\n                    <a href=\"#\" onClick={() => loadMapLayer(1)}>Wind Map</a>\r\n                    <a href=\"#\" onClick={() => loadMapLayer(2)}>Stations and Buoys</a>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n              {/* <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n                  Click me!\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"1\">\r\n                  <Card.Body>Hello! I'm another body</Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card> */}\r\n            </Accordion>\r\n\r\n\r\n            {/* <a href=\"#\" className=\"closebtn\" onClick={closeNav}>×</a> */}\r\n            {/* <a href=\"#\">Wind Map</a> */}\r\n            {/* <a href=\"#\">Stations and Buoys</a> */}\r\n            {/* <a href=\"#\">Clients</a> */}\r\n            {/* <a href=\"#\">Contact</a> */}\r\n          </div>\r\n      </div>\r\n        // <div className='nopadding'>\r\n        //   <Row>\r\n        //     <Col xs={12}>\r\n        //      {/* <div className='nav-container'> */}\r\n        //        <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n        //          <Navbar.Brand left-padding='10' href=\"#home\">Fish Finders</Navbar.Brand>\r\n        //        </Navbar>      \r\n        //      {/* </div> */}\r\n        //     </Col>\r\n        //   </Row>\r\n        //   <Row>\r\n        //     <Col xs={1}>\r\n        //       buttons\r\n        //     </Col>\r\n        //     <Col xs={11}>\r\n        //       <div className='sidebarStyle'>\r\n        //         <div>\r\n        //             Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n        //         </div>\r\n        //       </div>\r\n        //       <div className='map-container' ref={mapContainerRef}>\r\n        //       </div>\r\n        //     </Col>\r\n        //   </Row>\r\n        // </div>\r\n      );\r\n};\r\n    \r\nexport default MapViewer_v2;\r\n","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MapViewer_v3.js",["182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214"],"C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\StationDetailsPopup.js",["215"],"import React from \"react\";\r\n\r\nconst StationDetailsPopup = ({ feature }) => {\r\n    const { id, stat_name, stationIdentifier } = feature.properties;\r\n\r\n    return (\r\n        <div id={`popup-${id}`}>\r\n        <h5>{stat_name}</h5>\r\n        <p>Station Type: { feature.properties.station_type }</p>\r\n        <p>{ feature.properties.stat_Updated }</p>\r\n        <p>{ feature.properties.stat_windDir }</p>\r\n        <p>{ feature.properties.stat_windInfo }</p>\r\n        <p>{ feature.properties.stat_gustInfo }</p>\r\n        <p>{ feature.properties.stat_airTemp }</p>\r\n        <p>{ feature.properties.stat_airPressure }</p>\r\n        <p>{ feature.properties.stat_waterTemp }</p>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default StationDetailsPopup;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MarineForecastPopup.js",["216"],"import React from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst MarineForecastPopup = ({ feature }) => {\r\n\r\n    const { id, zone_name, zone_type } = feature.properties;\r\n\r\n    // console.log(\"id ==> \" + id);\r\n    // console.log(\"zone_name ==> \" + zone_name);\r\n    // console.log(\"zone_type ==> \" + zone_type);\r\n\r\n    const apiUrl = `https://tgftp.nws.noaa.gov/data/forecasts/marine/${zone_type}/an/${id.toString().toLowerCase()}.txt`;\r\n    //const apiUrl = `http://localhost:8181/${zone_type}/an/${id.toString().toLowerCase()}.txt`;\r\n    const [responseData, setResponseData] = React.useState();\r\n    const [responseErrors, setResponseErrors] = React.useState();\r\n\r\n    // console.log(apiUrl);\r\n    React.useEffect(() => {\r\n        fetch(apiUrl, {\r\n            mode: 'cors', // no-cors, *cors, same-origin,\r\n        }).then(function(response) {\r\n\r\n            response.text().then(function(text) {\r\n                var getText = text;\r\n                setResponseData(getText);\r\n            })\r\n\r\n        }).catch(function(error) {\r\n            setResponseErrors(error);\r\n        });\r\n    }, [setResponseData, setResponseErrors, apiUrl]); // Dependencies !!!\r\n\r\n    console.log(\"MarineForecastPopup !!!\");\r\n\r\n    if (responseData) {\r\n\r\n         //console.log(\"responseData ==> \");\r\n         //console.log(responseData);\r\n         //console.log(\"body ==> \");\r\n         //console.log(responseData.text();\r\n         //console.log(\"statusText ==> \" + responseData.statusText);\r\n        return (\r\n            <div id={`popup-${id}`}>\r\n                <h5>{zone_name}</h5>\r\n                <p>{`${responseData}`}</p>\r\n            </div>\r\n        );\r\n    } else if (responseErrors) {\r\n\r\n        //console.log(\"responseError ==> \");\r\n        //console.log(responseErrors);\r\n        return (\r\n            <div id={`error`}>\r\n                {/* <h5>{`Response Error: ${zone_name}`}</h5> */}\r\n                <h5>{`${zone_name}`}</h5>\r\n                <p>{`${responseErrors}`}</p>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div id={`error`}>\r\n                <h5>{zone_name}</h5>\r\n                <p>NWS Forecast Data Fetch Error</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default MarineForecastPopup;","C:\\Users\\Wayne\\REACT\\fish-finders-v1\\src\\components\\MarineForecastSlider.js",["217","218","219","220","221","222","223","224","225"],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":15},{"ruleId":"230","severity":1,"message":"234","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":17},{"ruleId":"230","severity":1,"message":"235","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":20},{"ruleId":"230","severity":1,"message":"236","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":18,"column":9,"nodeType":"239","endLine":18,"endColumn":23},{"ruleId":"230","severity":1,"message":"240","line":5,"column":10,"nodeType":"232","messageId":"233","endLine":5,"endColumn":35},{"ruleId":"230","severity":1,"message":"241","line":7,"column":10,"nodeType":"232","messageId":"233","endLine":7,"endColumn":32},{"ruleId":"230","severity":1,"message":"242","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":19},{"ruleId":"230","severity":1,"message":"243","line":9,"column":10,"nodeType":"232","messageId":"233","endLine":9,"endColumn":26},{"ruleId":"230","severity":1,"message":"244","line":21,"column":7,"nodeType":"232","messageId":"233","endLine":21,"endColumn":15},{"ruleId":"230","severity":1,"message":"245","line":22,"column":7,"nodeType":"232","messageId":"233","endLine":22,"endColumn":15},{"ruleId":"230","severity":1,"message":"246","line":23,"column":7,"nodeType":"232","messageId":"233","endLine":23,"endColumn":15},{"ruleId":"230","severity":1,"message":"247","line":25,"column":7,"nodeType":"232","messageId":"233","endLine":25,"endColumn":16},{"ruleId":"230","severity":1,"message":"248","line":26,"column":7,"nodeType":"232","messageId":"233","endLine":26,"endColumn":16},{"ruleId":"230","severity":1,"message":"249","line":40,"column":40,"nodeType":"232","messageId":"233","endLine":40,"endColumn":52},{"ruleId":"230","severity":1,"message":"250","line":112,"column":15,"nodeType":"232","messageId":"233","endLine":112,"endColumn":18},{"ruleId":"230","severity":1,"message":"251","line":112,"column":20,"nodeType":"232","messageId":"233","endLine":112,"endColumn":23},{"ruleId":"230","severity":1,"message":"252","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":14},{"ruleId":"230","severity":1,"message":"253","line":16,"column":7,"nodeType":"232","messageId":"233","endLine":16,"endColumn":14},{"ruleId":"230","severity":1,"message":"254","line":17,"column":7,"nodeType":"232","messageId":"233","endLine":17,"endColumn":13},{"ruleId":"230","severity":1,"message":"255","line":18,"column":7,"nodeType":"232","messageId":"233","endLine":18,"endColumn":13},{"ruleId":"230","severity":1,"message":"256","line":29,"column":7,"nodeType":"232","messageId":"233","endLine":29,"endColumn":16},{"ruleId":"230","severity":1,"message":"257","line":44,"column":15,"nodeType":"232","messageId":"233","endLine":44,"endColumn":21},{"ruleId":"230","severity":1,"message":"258","line":45,"column":15,"nodeType":"232","messageId":"233","endLine":45,"endColumn":21},{"ruleId":"230","severity":1,"message":"259","line":46,"column":16,"nodeType":"232","messageId":"233","endLine":46,"endColumn":23},{"ruleId":"230","severity":1,"message":"260","line":48,"column":10,"nodeType":"232","messageId":"233","endLine":48,"endColumn":16},{"ruleId":"230","severity":1,"message":"261","line":49,"column":10,"nodeType":"232","messageId":"233","endLine":49,"endColumn":15},{"ruleId":"230","severity":1,"message":"262","line":50,"column":10,"nodeType":"232","messageId":"233","endLine":50,"endColumn":15},{"ruleId":"230","severity":1,"message":"263","line":52,"column":10,"nodeType":"232","messageId":"233","endLine":52,"endColumn":21},{"ruleId":"230","severity":1,"message":"264","line":52,"column":23,"nodeType":"232","messageId":"233","endLine":52,"endColumn":37},{"ruleId":"230","severity":1,"message":"265","line":53,"column":10,"nodeType":"232","messageId":"233","endLine":53,"endColumn":22},{"ruleId":"230","severity":1,"message":"266","line":53,"column":24,"nodeType":"232","messageId":"233","endLine":53,"endColumn":39},{"ruleId":"230","severity":1,"message":"267","line":83,"column":11,"nodeType":"232","messageId":"233","endLine":83,"endColumn":27},{"ruleId":"230","severity":1,"message":"268","line":112,"column":11,"nodeType":"232","messageId":"233","endLine":112,"endColumn":26},{"ruleId":"230","severity":1,"message":"269","line":142,"column":11,"nodeType":"232","messageId":"233","endLine":142,"endColumn":30},{"ruleId":"270","severity":1,"message":"271","line":213,"column":43,"nodeType":"272","messageId":"273","endLine":213,"endColumn":45},{"ruleId":"230","severity":1,"message":"274","line":245,"column":17,"nodeType":"232","messageId":"233","endLine":245,"endColumn":29},{"ruleId":"230","severity":1,"message":"275","line":246,"column":17,"nodeType":"232","messageId":"233","endLine":246,"endColumn":30},{"ruleId":"230","severity":1,"message":"276","line":485,"column":13,"nodeType":"232","messageId":"233","endLine":485,"endColumn":28},{"ruleId":"230","severity":1,"message":"277","line":507,"column":21,"nodeType":"232","messageId":"233","endLine":507,"endColumn":34},{"ruleId":"230","severity":1,"message":"278","line":673,"column":19,"nodeType":"232","messageId":"233","endLine":673,"endColumn":27},{"ruleId":"279","severity":1,"message":"280","line":1000,"column":6,"nodeType":"281","endLine":1000,"endColumn":8,"suggestions":"282"},{"ruleId":"230","severity":1,"message":"283","line":2,"column":18,"nodeType":"232","messageId":"233","endLine":2,"endColumn":27},{"ruleId":"230","severity":1,"message":"284","line":21,"column":9,"nodeType":"232","messageId":"233","endLine":21,"endColumn":24},{"ruleId":"230","severity":1,"message":"285","line":22,"column":9,"nodeType":"232","messageId":"233","endLine":22,"endColumn":20},{"ruleId":"230","severity":1,"message":"286","line":23,"column":9,"nodeType":"232","messageId":"233","endLine":23,"endColumn":18},{"ruleId":"230","severity":1,"message":"287","line":24,"column":9,"nodeType":"232","messageId":"233","endLine":24,"endColumn":17},{"ruleId":"230","severity":1,"message":"288","line":14,"column":38,"nodeType":"232","messageId":"233","endLine":14,"endColumn":50},{"ruleId":"289","severity":1,"message":"290","line":22,"column":11,"nodeType":"232","messageId":"291","endLine":22,"endColumn":18},{"ruleId":"289","severity":1,"message":"292","line":23,"column":11,"nodeType":"232","messageId":"291","endLine":23,"endColumn":17},{"ruleId":"289","severity":1,"message":"293","line":24,"column":11,"nodeType":"232","messageId":"291","endLine":24,"endColumn":17},{"ruleId":"230","severity":1,"message":"294","line":1,"column":8,"nodeType":"232","messageId":"233","endLine":1,"endColumn":13},{"ruleId":"230","severity":1,"message":"294","line":1,"column":8,"nodeType":"232","messageId":"233","endLine":1,"endColumn":13},{"ruleId":"230","severity":1,"message":"295","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"253","line":4,"column":7,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"230","severity":1,"message":"254","line":5,"column":7,"nodeType":"232","messageId":"233","endLine":5,"endColumn":13},{"ruleId":"230","severity":1,"message":"255","line":6,"column":7,"nodeType":"232","messageId":"233","endLine":6,"endColumn":13},{"ruleId":"230","severity":1,"message":"294","line":1,"column":8,"nodeType":"232","messageId":"233","endLine":1,"endColumn":13},{"ruleId":"230","severity":1,"message":"295","line":1,"column":16,"nodeType":"232","messageId":"233","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"253","line":4,"column":7,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"230","severity":1,"message":"254","line":5,"column":7,"nodeType":"232","messageId":"233","endLine":5,"endColumn":13},{"ruleId":"230","severity":1,"message":"255","line":6,"column":7,"nodeType":"232","messageId":"233","endLine":6,"endColumn":13},{"ruleId":"230","severity":1,"message":"296","line":2,"column":8,"nodeType":"232","messageId":"233","endLine":2,"endColumn":16},{"ruleId":"230","severity":1,"message":"253","line":8,"column":7,"nodeType":"232","messageId":"233","endLine":8,"endColumn":14},{"ruleId":"230","severity":1,"message":"254","line":9,"column":7,"nodeType":"232","messageId":"233","endLine":9,"endColumn":13},{"ruleId":"230","severity":1,"message":"255","line":10,"column":7,"nodeType":"232","messageId":"233","endLine":10,"endColumn":13},{"ruleId":"230","severity":1,"message":"244","line":12,"column":7,"nodeType":"232","messageId":"233","endLine":12,"endColumn":15},{"ruleId":"230","severity":1,"message":"297","line":13,"column":7,"nodeType":"232","messageId":"233","endLine":13,"endColumn":15},{"ruleId":"230","severity":1,"message":"246","line":14,"column":7,"nodeType":"232","messageId":"233","endLine":14,"endColumn":15},{"ruleId":"230","severity":1,"message":"298","line":11,"column":38,"nodeType":"232","messageId":"233","endLine":11,"endColumn":49},{"ruleId":"289","severity":1,"message":"290","line":23,"column":11,"nodeType":"232","messageId":"291","endLine":23,"endColumn":18},{"ruleId":"289","severity":1,"message":"292","line":24,"column":11,"nodeType":"232","messageId":"291","endLine":24,"endColumn":17},{"ruleId":"289","severity":1,"message":"293","line":25,"column":11,"nodeType":"232","messageId":"291","endLine":25,"endColumn":17},{"ruleId":"230","severity":1,"message":"252","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":14},{"ruleId":"230","severity":1,"message":"299","line":10,"column":8,"nodeType":"232","messageId":"233","endLine":10,"endColumn":17},{"ruleId":"230","severity":1,"message":"300","line":11,"column":8,"nodeType":"232","messageId":"233","endLine":11,"endColumn":11},{"ruleId":"230","severity":1,"message":"301","line":12,"column":8,"nodeType":"232","messageId":"233","endLine":12,"endColumn":11},{"ruleId":"230","severity":1,"message":"256","line":33,"column":7,"nodeType":"232","messageId":"233","endLine":33,"endColumn":16},{"ruleId":"270","severity":1,"message":"271","line":138,"column":43,"nodeType":"272","messageId":"273","endLine":138,"endColumn":45},{"ruleId":"230","severity":1,"message":"274","line":170,"column":17,"nodeType":"232","messageId":"233","endLine":170,"endColumn":29},{"ruleId":"230","severity":1,"message":"275","line":171,"column":17,"nodeType":"232","messageId":"233","endLine":171,"endColumn":30},{"ruleId":"230","severity":1,"message":"276","line":385,"column":13,"nodeType":"232","messageId":"233","endLine":385,"endColumn":28},{"ruleId":"230","severity":1,"message":"277","line":402,"column":21,"nodeType":"232","messageId":"233","endLine":402,"endColumn":34},{"ruleId":"230","severity":1,"message":"278","line":536,"column":19,"nodeType":"232","messageId":"233","endLine":536,"endColumn":27},{"ruleId":"279","severity":1,"message":"302","line":819,"column":6,"nodeType":"281","endLine":819,"endColumn":8,"suggestions":"303"},{"ruleId":"230","severity":1,"message":"304","line":823,"column":9,"nodeType":"232","messageId":"233","endLine":823,"endColumn":16},{"ruleId":"230","severity":1,"message":"305","line":828,"column":9,"nodeType":"232","messageId":"233","endLine":828,"endColumn":17},{"ruleId":"306","severity":1,"message":"307","line":1015,"column":21,"nodeType":"239","endLine":1015,"endColumn":65},{"ruleId":"306","severity":1,"message":"307","line":1016,"column":21,"nodeType":"239","endLine":1016,"endColumn":65},{"ruleId":"230","severity":1,"message":"252","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":14},{"ruleId":"230","severity":1,"message":"308","line":21,"column":8,"nodeType":"232","messageId":"233","endLine":21,"endColumn":27},{"ruleId":"230","severity":1,"message":"256","line":41,"column":7,"nodeType":"232","messageId":"233","endLine":41,"endColumn":16},{"ruleId":"230","severity":1,"message":"309","line":155,"column":13,"nodeType":"232","messageId":"233","endLine":155,"endColumn":32},{"ruleId":"310","severity":1,"message":"311","line":226,"column":40,"nodeType":"312","messageId":"313","endLine":226,"endColumn":42},{"ruleId":"230","severity":1,"message":"314","line":234,"column":17,"nodeType":"232","messageId":"233","endLine":234,"endColumn":30},{"ruleId":"230","severity":1,"message":"276","line":261,"column":13,"nodeType":"232","messageId":"233","endLine":261,"endColumn":28},{"ruleId":"270","severity":1,"message":"271","line":426,"column":43,"nodeType":"272","messageId":"273","endLine":426,"endColumn":45},{"ruleId":"310","severity":1,"message":"311","line":467,"column":38,"nodeType":"312","messageId":"313","endLine":467,"endColumn":40},{"ruleId":"230","severity":1,"message":"315","line":495,"column":17,"nodeType":"232","messageId":"233","endLine":495,"endColumn":31},{"ruleId":"289","severity":1,"message":"316","line":518,"column":21,"nodeType":"232","messageId":"291","endLine":518,"endColumn":31},{"ruleId":"230","severity":1,"message":"317","line":518,"column":21,"nodeType":"232","messageId":"233","endLine":518,"endColumn":31},{"ruleId":"230","severity":1,"message":"318","line":523,"column":21,"nodeType":"232","messageId":"233","endLine":523,"endColumn":31},{"ruleId":"230","severity":1,"message":"309","line":616,"column":11,"nodeType":"232","messageId":"233","endLine":616,"endColumn":30},{"ruleId":"310","severity":1,"message":"311","line":770,"column":40,"nodeType":"312","messageId":"313","endLine":770,"endColumn":42},{"ruleId":"230","severity":1,"message":"314","line":778,"column":17,"nodeType":"232","messageId":"233","endLine":778,"endColumn":30},{"ruleId":"230","severity":1,"message":"276","line":805,"column":13,"nodeType":"232","messageId":"233","endLine":805,"endColumn":28},{"ruleId":"230","severity":1,"message":"319","line":965,"column":15,"nodeType":"232","messageId":"233","endLine":965,"endColumn":23},{"ruleId":"310","severity":1,"message":"311","line":1003,"column":38,"nodeType":"312","messageId":"313","endLine":1003,"endColumn":40},{"ruleId":"289","severity":1,"message":"316","line":1057,"column":21,"nodeType":"232","messageId":"291","endLine":1057,"endColumn":31},{"ruleId":"230","severity":1,"message":"317","line":1057,"column":21,"nodeType":"232","messageId":"233","endLine":1057,"endColumn":31},{"ruleId":"230","severity":1,"message":"318","line":1063,"column":21,"nodeType":"232","messageId":"233","endLine":1063,"endColumn":31},{"ruleId":"230","severity":1,"message":"278","line":1085,"column":17,"nodeType":"232","messageId":"233","endLine":1085,"endColumn":25},{"ruleId":"230","severity":1,"message":"320","line":1304,"column":11,"nodeType":"232","messageId":"233","endLine":1304,"endColumn":27},{"ruleId":"230","severity":1,"message":"321","line":1418,"column":17,"nodeType":"232","messageId":"233","endLine":1418,"endColumn":28},{"ruleId":"230","severity":1,"message":"322","line":1461,"column":17,"nodeType":"232","messageId":"233","endLine":1461,"endColumn":29},{"ruleId":"279","severity":1,"message":"302","line":1609,"column":6,"nodeType":"281","endLine":1609,"endColumn":8,"suggestions":"323"},{"ruleId":"324","severity":1,"message":"325","line":2207,"column":7,"nodeType":"326","messageId":"327","endLine":2366,"endColumn":15},{"ruleId":"230","severity":1,"message":"328","line":2337,"column":19,"nodeType":"232","messageId":"233","endLine":2337,"endColumn":30},{"ruleId":"230","severity":1,"message":"329","line":2338,"column":19,"nodeType":"232","messageId":"233","endLine":2338,"endColumn":26},{"ruleId":"306","severity":1,"message":"307","line":2412,"column":29,"nodeType":"239","endLine":2412,"endColumn":73},{"ruleId":"306","severity":1,"message":"307","line":2413,"column":29,"nodeType":"239","endLine":2413,"endColumn":73},{"ruleId":"306","severity":1,"message":"307","line":2415,"column":29,"nodeType":"239","endLine":2415,"endColumn":73},{"ruleId":"230","severity":1,"message":"330","line":4,"column":28,"nodeType":"232","messageId":"233","endLine":4,"endColumn":45},{"ruleId":"230","severity":1,"message":"331","line":2,"column":8,"nodeType":"232","messageId":"233","endLine":2,"endColumn":13},{"ruleId":"230","severity":1,"message":"331","line":2,"column":8,"nodeType":"232","messageId":"233","endLine":2,"endColumn":13},{"ruleId":"230","severity":1,"message":"300","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":11},{"ruleId":"230","severity":1,"message":"301","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":11},{"ruleId":"230","severity":1,"message":"332","line":7,"column":8,"nodeType":"232","messageId":"233","endLine":7,"endColumn":11},{"ruleId":"230","severity":1,"message":"333","line":68,"column":12,"nodeType":"232","messageId":"233","endLine":68,"endColumn":32},{"ruleId":"230","severity":1,"message":"334","line":94,"column":13,"nodeType":"232","messageId":"233","endLine":94,"endColumn":25},{"ruleId":"270","severity":1,"message":"271","line":106,"column":51,"nodeType":"272","messageId":"273","endLine":106,"endColumn":53},{"ruleId":"270","severity":1,"message":"271","line":120,"column":62,"nodeType":"272","messageId":"273","endLine":120,"endColumn":64},{"ruleId":"230","severity":1,"message":"335","line":125,"column":25,"nodeType":"232","messageId":"233","endLine":125,"endColumn":33},"no-native-reassign",["336"],"no-negated-in-lhs",["337"],"no-unused-vars","'MapView' is defined but never used.","Identifier","unusedVar","'MapViewer' is defined but never used.","'MapViewer_v2' is defined but never used.","'MapViewerClass' is defined but never used.","react/jsx-pascal-case","Imported JSX component MapViewer_v3 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'useRequestNwsStations_Swr' is defined but never used.","'useRequestNOAABuoy_Swr' is defined but never used.","'NwsStations' is defined but never used.","'NwsStationsAsync' is defined but never used.","'_nws_Lat' is assigned a value but never used.","'_nws_Lon' is assigned a value but never used.","'_nws_Rad' is assigned a value but never used.","'_mBox_Lat' is assigned a value but never used.","'_mBox_Lon' is assigned a value but never used.","'errorNWS_Alt' is assigned a value but never used.","'lng' is assigned a value but never used.","'lat' is assigned a value but never used.","'xml2js' is defined but never used.","'_gridId' is assigned a value but never used.","'_gridX' is assigned a value but never used.","'_gridY' is assigned a value but never used.","'ndbRadius' is assigned a value but never used.","'setLng' is assigned a value but never used.","'setLat' is assigned a value but never used.","'setZoom' is assigned a value but never used.","'gridId' is assigned a value but never used.","'gridX' is assigned a value but never used.","'gridY' is assigned a value but never used.","'nwsStations' is assigned a value but never used.","'setNwsStations' is assigned a value but never used.","'ndbcStations' is assigned a value but never used.","'setNdbcStations' is assigned a value but never used.","'getNwsPointsData' is assigned a value but never used.","'getStationsData' is assigned a value but never used.","'getNdbcStationsData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'wind_degrees' is assigned a value but never used.","'water_degrees' is assigned a value but never used.","'stat_Identifier' is assigned a value but never used.","'stat_wind_mph' is assigned a value but never used.","'dir_Text' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'lat', 'lng', 'stationWindData', and 'zoom'. Either include them or remove the dependency array.","ArrayExpression",["338"],"'SWRConfig' is defined but never used.","'textDescription' is assigned a value but never used.","'temperature' is assigned a value but never used.","'windSpeed' is assigned a value but never used.","'windGust' is assigned a value but never used.","'pointsErrors' is assigned a value but never used.","no-redeclare","'_gridId' is already defined.","redeclared","'_gridX' is already defined.","'_gridY' is already defined.","'React' is defined but never used.","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'_nws_Lng' is assigned a value but never used.","'pointsError' is assigned a value but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","React Hook useEffect has missing dependencies: 'lat', 'lng', and 'zoom'. Either include them or remove the dependency array.",["339"],"'openNav' is assigned a value but never used.","'closeNav' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'MarineForecastPopup' is defined but never used.","'stat_AirPressure_Mb' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'stat_TextDesc' is assigned a value but never used.","'wind_direction' is assigned a value but never used.","'chkItem_at' is already defined.","'chkItem_at' is assigned a value but never used.","'chkItem_wt' is assigned a value but never used.","'pub_Date' is assigned a value but never used.","'getSstFtpTifData' is assigned a value but never used.","'thisFeature' is assigned a value but never used.","'thisCentroid' is assigned a value but never used.",["340"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'coordinates' is assigned a value but never used.","'zone_id' is assigned a value but never used.","'stationIdentifier' is assigned a value but never used.","'axios' is defined but never used.","'Nav' is defined but never used.","'responseErrorsAlerts' is assigned a value but never used.","'areaDesc_All' is assigned a value but never used.","'headLine' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"343","fix":"345"},"Update the dependencies array to be: [lat, lng, stationWindData, zoom]",{"range":"346","text":"347"},"Update the dependencies array to be: [lat, lng, zoom]",{"range":"348","text":"349"},{"range":"350","text":"349"},[38155,38157],"[lat, lng, stationWindData, zoom]",[31166,31168],"[lat, lng, zoom]",[64786,64788]]